{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;MaybeNumeric is a function that returns either a number or a string depending on whether the input (string) is a valid description of a number.&lt;/p&gt;\n\n&lt;h1&gt;sample input (string)&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;  123\n  44.234\n  0x123N\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;sample output (any)&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;  123 (number)\n  44.234 (number)\n  0x123N (string)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;bonus 1: special numbers&lt;/h1&gt;\n\n&lt;p&gt;finding arrays, exponent notation, bignumber&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  123 234 345\n  3.23e5\n  1293712938712938172938172391287319237192837329\n  .25\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;bonus 2:  parsing separated values&lt;/h1&gt;\n\n&lt;p&gt;(clarification: backtick is the sparator. space is only a separator for numeric arrays)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; 2015 4 4`Challenge #`261`Easy\n 234.2`234ggf 45`00`number string number (0)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;bonus 3 : inverted table/column database/array&lt;/h1&gt;\n\n&lt;p&gt;An inverted table is an other term for column arrays, where each field is an independent array of uniform types.  These structures are often faster than row oriented heterogeneous arrays, because homogeneous arrays (often the only valid option in a language) are represented as tightly packed values instead of indirect pointers to typed values.  A row record (from an array of columns) is simply a common index that is used to retrieve elements from each of the arrays.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Convert the structure parsed from bonus#2 into an inverted table&lt;/strong&gt;: ie. 4 arrays of 2 elements... IF the 4 fields are homogeneous (they are in bonus#2 example).&lt;/p&gt;\n\n&lt;p&gt;You may wish to deal with &amp;quot;homogenizing&amp;quot; an integer array with a float scalar for first field (promoted as arrays of floats, with ideal fill of infinity in 2nd record (though 0 fill credible choice too)).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;invalid inverted table example&lt;/strong&gt; (should just keep row oriented records)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; 2015 4 4`Challenge #`261`Easy\n 234.2`234ggf 45`0`8\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;intended output is in my solution here: &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4eaeff/20160411_challenge_262_easy_maybenumeric/d1ye03b\"&gt;https://www.reddit.com/r/dailyprogrammer/comments/4eaeff/20160411_challenge_262_easy_maybenumeric/d1ye03b&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "MaybeNumeric is a function that returns either a number or a string depending on whether the input (string) is a valid description of a number.\n\n# sample input (string)\n\n      123\n      44.234\n      0x123N\n\n# sample output (any)\n\n      123 (number)\n      44.234 (number)\n      0x123N (string)\n\n# bonus 1: special numbers\n\nfinding arrays, exponent notation, bignumber\n\n      123 234 345\n      3.23e5\n      1293712938712938172938172391287319237192837329\n      .25\n\n# bonus 2:  parsing separated values\n(clarification: backtick is the sparator. space is only a separator for numeric arrays)\n\n     2015 4 4`Challenge #`261`Easy\n     234.2`234ggf 45`00`number string number (0)\n\n#bonus 3 : inverted table/column database/array\n\nAn inverted table is an other term for column arrays, where each field is an independent array of uniform types.  These structures are often faster than row oriented heterogeneous arrays, because homogeneous arrays (often the only valid option in a language) are represented as tightly packed values instead of indirect pointers to typed values.  A row record (from an array of columns) is simply a common index that is used to retrieve elements from each of the arrays.\n\n**Convert the structure parsed from bonus#2 into an inverted table**: ie. 4 arrays of 2 elements... IF the 4 fields are homogeneous (they are in bonus#2 example).\n\nYou may wish to deal with \"homogenizing\" an integer array with a float scalar for first field (promoted as arrays of floats, with ideal fill of infinity in 2nd record (though 0 fill credible choice too)).\n\n**invalid inverted table example** (should just keep row oriented records)\n\n     2015 4 4`Challenge #`261`Easy\n     234.2`234ggf 45`0`8\n\nintended output is in my solution here: https://www.reddit.com/r/dailyprogrammer/comments/4eaeff/20160411_challenge_262_easy_maybenumeric/d1ye03b", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4eaeff", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "score": 49, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 48, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1460381784.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4eaeff/20160411_challenge_262_easy_maybenumeric/", "locked": false, "name": "t3_4eaeff", "created": 1460405045.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4eaeff/20160411_challenge_262_easy_maybenumeric/", "author_flair_text": "3 2", "quarantine": false, "title": "[2016-04-11] Challenge #262 [Easy] MaybeNumeric", "created_utc": 1460376245.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 49}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;An NxN magic square is an NxN grid of the numbers 1 through N&lt;sup&gt;2&lt;/sup&gt; such that each row, column, and major diagonal adds up to M = N(N&lt;sup&gt;2&lt;/sup&gt;+1)/2. &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4dccix/20160404_challenge_261_easy_verifying_3x3_magic/\"&gt;See this week&amp;#39;s Easy problem for an example.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For some even N, you will be given the numbers 1 through N&lt;sup&gt;2&lt;/sup&gt; as N&lt;sup&gt;2&lt;/sup&gt;/2 pairs of numbers. You must produce an NxN magic square using the pairs of numbers like dominoes covering a grid. That is, your output is an NxN magic square such that, for each pair of numbers in the input, the two numbers in the pair are adjacent, either vertically or horizontally. The numbers can be swapped so that either one is on the top or left.&lt;/p&gt;\n\n&lt;p&gt;For the input provided, there is guaranteed to be at least one magic square that can be formed this way. (In fact there must be at least eight such magic squares, given reflection and rotation.)&lt;/p&gt;\n\n&lt;p&gt;Format the grid and input it into your function however you like.&lt;/p&gt;\n\n&lt;h1&gt;Efficiency&lt;/h1&gt;\n\n&lt;p&gt;An acceptable solution to this problem must be significantly faster than brute force. (This is Hard, after all.) You don&amp;#39;t need to get the optimal solution, but you should run your program to completion on at least one challenge input before submitting. Post your output for one of the challenge inputs along with your code (unless you&amp;#39;re stuck and asking for help).&lt;/p&gt;\n\n&lt;p&gt;Aim to finish one of the three 4x4 challenge inputs within a few minutes (my Python program takes about 11 seconds for all three). I have no idea how feasible the larger ones are. I started my program on a 6x6 input about 10 hours ago and it hasn&amp;#39;t finished. But I&amp;#39;m guessing someone here will be more clever than me, so I generated inputs up to 16x16.&lt;/p&gt;\n\n&lt;p&gt;Good luck!&lt;/p&gt;\n\n&lt;h1&gt;Example input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;1 9\n2 10\n3 6\n4 14\n5 11\n7 15\n8 16\n12 13\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Example output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt; 9  4 14  7\n 1 12  6 15\n16 13  3  2\n 8  5 11 10\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge inputs&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/6dkYxvrM\"&gt;Challenge inputs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nAn NxN magic square is an NxN grid of the numbers 1 through N^2 such that each row, column, and major diagonal adds up to M = N(N^(2)+1)/2. [See this week's Easy problem for an example.](https://www.reddit.com/r/dailyprogrammer/comments/4dccix/20160404_challenge_261_easy_verifying_3x3_magic/)\n\nFor some even N, you will be given the numbers 1 through N^2 as N^(2)/2 pairs of numbers. You must produce an NxN magic square using the pairs of numbers like dominoes covering a grid. That is, your output is an NxN magic square such that, for each pair of numbers in the input, the two numbers in the pair are adjacent, either vertically or horizontally. The numbers can be swapped so that either one is on the top or left.\n\nFor the input provided, there is guaranteed to be at least one magic square that can be formed this way. (In fact there must be at least eight such magic squares, given reflection and rotation.)\n\nFormat the grid and input it into your function however you like.\n\n# Efficiency\n\nAn acceptable solution to this problem must be significantly faster than brute force. (This is Hard, after all.) You don't need to get the optimal solution, but you should run your program to completion on at least one challenge input before submitting. Post your output for one of the challenge inputs along with your code (unless you're stuck and asking for help).\n\nAim to finish one of the three 4x4 challenge inputs within a few minutes (my Python program takes about 11 seconds for all three). I have no idea how feasible the larger ones are. I started my program on a 6x6 input about 10 hours ago and it hasn't finished. But I'm guessing someone here will be more clever than me, so I generated inputs up to 16x16.\n\nGood luck!\n\n# Example input\n\n    1 9\n    2 10\n    3 6\n    4 14\n    5 11\n    7 15\n    8 16\n    12 13\n\n# Example output\n\n     9  4 14  7\n     1 12  6 15\n    16 13  3  2\n     8  5 11 10\n\n# Challenge inputs\n\n[Challenge inputs](http://pastebin.com/6dkYxvrM)", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4dwk7b", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "score": 60, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 16, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4dwk7b/20160408_challenge_261_hard_magic_square_dominoes/", "locked": false, "name": "t3_4dwk7b", "created": 1460153642.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4dwk7b/20160408_challenge_261_hard_magic_square_dominoes/", "author_flair_text": "2 2", "quarantine": false, "title": "[2016-04-08] Challenge #261 [Hard] magic square dominoes", "created_utc": 1460124842.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 60}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;An NxN magic square is an NxN grid of the numbers 1 through N&lt;sup&gt;2&lt;/sup&gt; such that each row, column, and major diagonal adds up to M = N(N&lt;sup&gt;2&lt;/sup&gt;+1)/2. &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4dccix/20160404_challenge_261_easy_verifying_3x3_magic/\"&gt;See this week&amp;#39;s Easy problem for an example.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You will be given an NxN grid that is not a magic square, but whose rows can be rearranged to form a magic square. In this case, rearranging the rows means to put the rows (horizontal lines of numbers) in a different order, but within each row the numbers stay the same. So for instance, the top row can be swapped with the second row, but the numbers within each row cannot be moved to a different position horizontally, and the numbers that are on the same row as each other to begin with must remain on the same row as each other.&lt;/p&gt;\n\n&lt;p&gt;Write a function to find a magic square formed by rearranging the rows of the given grid.&lt;/p&gt;\n\n&lt;p&gt;There is more than one correct solution. Format your grid however you like. You can parse the program&amp;#39;s input to get the grid, but you don&amp;#39;t have to.&lt;/p&gt;\n\n&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;15 14  1  4        12  6  9  7\n12  6  9  7   =&amp;gt;    2 11  8 13\n 2 11  8 13        15 14  1  4\n 5  3 16 10         5  3 16 10\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Inputs&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/tWzmKrJh\"&gt;Challenge inputs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Any technique is going to eventually run too slowly when the grid size gets too large, but you should be able to handle 8x8 in a reasonable amount of time (less than a few minutes). If you want more of a challenge, see how many of the example inputs you can solve.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve had pretty good success with just randomly rearranging the rows and checking the result. Of course, you can use a &amp;quot;smarter&amp;quot; technique if you want, as long as it works!&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus&lt;/h1&gt;\n\n&lt;p&gt;(Warning: hard for 12x12 or larger!) Given a grid whose rows can be rearranged to form a magic square, give the &lt;em&gt;number&lt;/em&gt; of different ways this can be done. That is, how many of the N! orderings of the rows will result in a magic square?&lt;/p&gt;\n\n&lt;p&gt;If you take on this challenge, include the result you get for as many of the &lt;a href=\"http://pastebin.com/tWzmKrJh\"&gt;challenge input grids&lt;/a&gt; as you can, along with your code.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nAn NxN magic square is an NxN grid of the numbers 1 through N^2 such that each row, column, and major diagonal adds up to M = N(N^(2)+1)/2. [See this week's Easy problem for an example.](https://www.reddit.com/r/dailyprogrammer/comments/4dccix/20160404_challenge_261_easy_verifying_3x3_magic/)\n\nYou will be given an NxN grid that is not a magic square, but whose rows can be rearranged to form a magic square. In this case, rearranging the rows means to put the rows (horizontal lines of numbers) in a different order, but within each row the numbers stay the same. So for instance, the top row can be swapped with the second row, but the numbers within each row cannot be moved to a different position horizontally, and the numbers that are on the same row as each other to begin with must remain on the same row as each other.\n\nWrite a function to find a magic square formed by rearranging the rows of the given grid.\n\nThere is more than one correct solution. Format your grid however you like. You can parse the program's input to get the grid, but you don't have to.\n\n# Example\n\n    15 14  1  4        12  6  9  7\n    12  6  9  7   =&gt;    2 11  8 13\n     2 11  8 13        15 14  1  4\n     5  3 16 10         5  3 16 10\n\n# Inputs\n\n[Challenge inputs](http://pastebin.com/tWzmKrJh)\n\nAny technique is going to eventually run too slowly when the grid size gets too large, but you should be able to handle 8x8 in a reasonable amount of time (less than a few minutes). If you want more of a challenge, see how many of the example inputs you can solve.\n\nI've had pretty good success with just randomly rearranging the rows and checking the result. Of course, you can use a \"smarter\" technique if you want, as long as it works!\n\n# Optional bonus\n\n(Warning: hard for 12x12 or larger!) Given a grid whose rows can be rearranged to form a magic square, give the *number* of different ways this can be done. That is, how many of the N! orderings of the rows will result in a magic square?\n\nIf you take on this challenge, include the result you get for as many of the [challenge input grids](http://pastebin.com/tWzmKrJh) as you can, along with your code.", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4dmm44", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "score": 70, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 82, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4dmm44/20160406_challenge_261_intermediate_rearranged/", "locked": false, "name": "t3_4dmm44", "created": 1459990250.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4dmm44/20160406_challenge_261_intermediate_rearranged/", "author_flair_text": "2 2", "quarantine": false, "title": "[2016-04-06] Challenge #261 [Intermediate] rearranged magic squares", "created_utc": 1459961450.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 70}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;A 3x3 magic square is a 3x3 grid of the numbers 1-9 such that each row, column, and major diagonal adds up to 15. Here&amp;#39;s an example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;8 1 6\n3 5 7\n4 9 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The major diagonals in this example are 8 + 5 + 2 and 6 + 5 + 4. (Magic squares have appeared here on &lt;a href=\"/r/dailyprogrammer\"&gt;r/dailyprogrammer&lt;/a&gt; before, in &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/v3agk/6152012_challenge_65_difficult/\"&gt;#65 [Difficult]&lt;/a&gt; in 2012.)&lt;/p&gt;\n\n&lt;p&gt;Write a function that, given a grid containing the numbers 1-9, determines whether it&amp;#39;s a magic square. Use whatever format you want for the grid, such as a 2-dimensional array, or a 1-dimensional array of length 9, or a function that takes 9 arguments. You do not need to parse the grid from the program&amp;#39;s input, but you can if you want to. You don&amp;#39;t need to check that each of the 9 numbers appears in the grid: assume this to be true.&lt;/p&gt;\n\n&lt;h1&gt;Example inputs/outputs&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;[8, 1, 6, 3, 5, 7, 4, 9, 2] =&amp;gt; true\n[2, 7, 6, 9, 5, 1, 4, 3, 8] =&amp;gt; true\n[3, 5, 7, 8, 1, 6, 4, 9, 2] =&amp;gt; false\n[8, 1, 6, 7, 5, 3, 4, 9, 2] =&amp;gt; false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional bonus 1&lt;/h1&gt;\n\n&lt;p&gt;Verify magic squares of any size, not just 3x3.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus 2&lt;/h1&gt;\n\n&lt;p&gt;Write another function that takes a grid whose bottom row is missing, so it only has the first 2 rows (6 values). This function should return true if it&amp;#39;s &lt;em&gt;possible&lt;/em&gt; to fill in the bottom row to make a magic square. You may assume that the numbers given are all within the range 1-9 and no number is repeated. Examples:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[8, 1, 6, 3, 5, 7] =&amp;gt; true\n[3, 5, 7, 8, 1, 6] =&amp;gt; false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hint: it&amp;#39;s okay for this function to call your function from the main challenge.&lt;/p&gt;\n\n&lt;p&gt;This bonus can also be combined with optional bonus 1. (i.e. verify larger magic squares that are missing their bottom row.)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nA 3x3 magic square is a 3x3 grid of the numbers 1-9 such that each row, column, and major diagonal adds up to 15. Here's an example:\n\n    8 1 6\n    3 5 7\n    4 9 2\n\nThe major diagonals in this example are 8 + 5 + 2 and 6 + 5 + 4. (Magic squares have appeared here on r/dailyprogrammer before, in [#65 [Difficult]](https://www.reddit.com/r/dailyprogrammer/comments/v3agk/6152012_challenge_65_difficult/) in 2012.)\n\nWrite a function that, given a grid containing the numbers 1-9, determines whether it's a magic square. Use whatever format you want for the grid, such as a 2-dimensional array, or a 1-dimensional array of length 9, or a function that takes 9 arguments. You do not need to parse the grid from the program's input, but you can if you want to. You don't need to check that each of the 9 numbers appears in the grid: assume this to be true.\n\n#Example inputs/outputs\n\n    [8, 1, 6, 3, 5, 7, 4, 9, 2] =&gt; true\n    [2, 7, 6, 9, 5, 1, 4, 3, 8] =&gt; true\n    [3, 5, 7, 8, 1, 6, 4, 9, 2] =&gt; false\n    [8, 1, 6, 7, 5, 3, 4, 9, 2] =&gt; false\n\n#Optional bonus 1\n\nVerify magic squares of any size, not just 3x3.\n\n#Optional bonus 2\n\nWrite another function that takes a grid whose bottom row is missing, so it only has the first 2 rows (6 values). This function should return true if it's *possible* to fill in the bottom row to make a magic square. You may assume that the numbers given are all within the range 1-9 and no number is repeated. Examples:\n\n    [8, 1, 6, 3, 5, 7] =&gt; true\n    [3, 5, 7, 8, 1, 6] =&gt; false\n\nHint: it's okay for this function to call your function from the main challenge.\n\nThis bonus can also be combined with optional bonus 1. (i.e. verify larger magic squares that are missing their bottom row.)", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4dccix", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "score": 75, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 193, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4dccix/20160404_challenge_261_easy_verifying_3x3_magic/", "locked": false, "name": "t3_4dccix", "created": 1459822707.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4dccix/20160404_challenge_261_easy_verifying_3x3_magic/", "author_flair_text": "2 2", "quarantine": false, "title": "[2016-04-04] Challenge #261 [Easy] verifying 3x3 magic squares", "created_utc": 1459793907.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 75}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Sleether Yn is a neverending snake, and like all neverending snakes, she loves drinking neverending soda and eating baloney. She also hates walking (err, creeping) -- which probably has to do with the fact that her body &lt;strong&gt;grows whenever she moves&lt;/strong&gt;. Your goal is give Yn instructions to &lt;strong&gt;eat all the food&lt;/strong&gt; on the map, while &lt;strong&gt;moving as little as possible&lt;/strong&gt;. On map 1, for instance, you could just tell her: &amp;quot;&lt;strong&gt;r2d2&lt;/strong&gt;&amp;quot;, for &amp;quot;move right twice and down twice&amp;quot; (she can&amp;#39;t move diagonally). You might also say &amp;quot;rrdd&amp;quot;, if you prefer.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+- map 1 --+\n| s        |\n|          |\n|   *      |\n+----------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On map 2, though, you could either instruct her &amp;quot;r5d2l2&amp;quot; or &amp;quot;d2r3r2u2&amp;quot;; both are equally good, with 9 moves each. You could not tell her &amp;quot;r3d2u2r2&amp;quot;, though, because she whould &lt;strong&gt;crash against herself&lt;/strong&gt; when going &amp;quot;u2&amp;quot; -- life is hard when you&amp;#39;re an neverending snake!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+- map 2 --+\n| s    *   |\n|          |\n|    *     |\n+----------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But as if Yn didn&amp;#39;t have enough problems already, she still has to worry about the neverending pits! Believe me, you do not want to fall in one. So on map 3, for instance, she has to do something like &amp;quot;d3r3u1l2u3r5d&amp;quot; (17 moves). Whew!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+- map 3 --+\n|          |\n| s OO  *  |\n|    OOO   |\n|    * OOOO|\n|          |\n+----------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So let&amp;#39;s recap: you can tell Sleether (&amp;quot;s&amp;quot;) to go up (&amp;quot;u&amp;quot;), down (&amp;quot;d&amp;quot;), left (&amp;quot;l&amp;quot;) or right (&amp;quot;r&amp;quot;). On each map, she must eat (go over) all baloney sandwiches (&amp;quot;*&amp;quot;), while &lt;strong&gt;avoiding her own trail&lt;/strong&gt; (including the initial square) and the neverending pits (&amp;quot;O&amp;quot;).&lt;/p&gt;\n\n&lt;h1&gt;Input &amp;amp; Output&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;: a map, like the ones described above; you can ignore the first and last lines (those with &amp;quot;+&amp;quot;s), and parse only the characters between the pipes (&amp;quot;|&amp;quot;).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: a string with commands to solve the map.&lt;/p&gt;\n\n&lt;p&gt;Can you make a solver that finds instructions for maps 1 to 16?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+- map 4 --+- map 5 --+- map 6 --+-- map 7 --+map 8+- map 9 ----+- map 10 -+\n|*         |     *    |      *   |      *  * |*   *|*O *  O O   | *     OO |\n|   OOO    |OO  *  *  |     *    | *O  OO*   | * * |      s*  O | O     **O|\n| s    *   | *  Os   *| *O    O *| s*    O   |  s  |     * O   O|  *   * sO|\n|OOOOOO    |  *    *  |OOO   *OOO| *OOO   O *| * * |          O |          |\n|*         |     *    | s       *|       * O |*   *|  O*  * O   |OO  OOO* O|\n+----------+----------+----------+-----------+-----+------------+----------+\n+- map 11 -+- map 12 -+- map 13 --+-- map 14 --+-- map 15 --+--- map 16 ---+\n|     sOO  |   O     O|    * *OO  |OO *      * |   *      OO|       *   *  |\n|**   * *  |  O   OO O|           | O    * O  O|*   O    ** |    O     *  O|\n|        O | O*   s*  |**O        |*   O  O*  *|O         O |  O     OO   *|\n|O*  *  OOO|*    *  * | *OsO   O  |O O *       |  *    *O O | s      *     |\n|*     OOO | O      OO|    *O OO  |O      OO s*|     **s O  |O O* O* OO    |\n+----------+----------+-----------+------------+------------+--------------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Also please share interesting maps you come up with, especially ones that your own solver cannot work around!&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re stuck, &lt;a href=\"https://en.wikipedia.org/wiki/Maze_solving_algorithm\"&gt;this&lt;/a&gt; might help. If not, it&amp;#39;s an interesting read anyway.&lt;/p&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/alfred300p\"&gt;/u/alfred300p&lt;/a&gt;. Have a good challenge idea? Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\nSleether Yn is a neverending snake, and like all neverending snakes, she loves drinking neverending soda and eating baloney. She also hates walking (err, creeping) -- which probably has to do with the fact that her body **grows whenever she moves**. Your goal is give Yn instructions to **eat all the food** on the map, while **moving as little as possible**. On map 1, for instance, you could just tell her: \"**r2d2**\", for \"move right twice and down twice\" (she can't move diagonally). You might also say \"rrdd\", if you prefer.\n\n    +- map 1 --+\n    | s        |\n    |          |\n    |   *      |\n    +----------+\n\nOn map 2, though, you could either instruct her \"r5d2l2\" or \"d2r3r2u2\"; both are equally good, with 9 moves each. You could not tell her \"r3d2u2r2\", though, because she whould **crash against herself** when going \"u2\" -- life is hard when you're an neverending snake!\n\n    +- map 2 --+\n    | s    *   |\n    |          |\n    |    *     |\n    +----------+\n\nBut as if Yn didn't have enough problems already, she still has to worry about the neverending pits! Believe me, you do not want to fall in one. So on map 3, for instance, she has to do something like \"d3r3u1l2u3r5d\" (17 moves). Whew!\n\n    +- map 3 --+\n    |          |\n    | s OO  *  |\n    |    OOO   |\n    |    * OOOO|\n    |          |\n    +----------+\n\nSo let's recap: you can tell Sleether (\"s\") to go up (\"u\"), down (\"d\"), left (\"l\") or right (\"r\"). On each map, she must eat (go over) all baloney sandwiches (\"\\*\"), while **avoiding her own trail** (including the initial square) and the neverending pits (\"O\").\n\n# Input &amp;amp; Output\n**Input**: a map, like the ones described above; you can ignore the first and last lines (those with \"+\"s), and parse only the characters between the pipes (\"|\").\n\n**Output**: a string with commands to solve the map.\n\nCan you make a solver that finds instructions for maps 1 to 16?\n\n    +- map 4 --+- map 5 --+- map 6 --+-- map 7 --+map 8+- map 9 ----+- map 10 -+\n    |*         |     *    |      *   |      *  * |*   *|*O *  O O   | *     OO |\n    |   OOO    |OO  *  *  |     *    | *O  OO*   | * * |      s*  O | O     **O|\n    | s    *   | *  Os   *| *O    O *| s*    O   |  s  |     * O   O|  *   * sO|\n    |OOOOOO    |  *    *  |OOO   *OOO| *OOO   O *| * * |          O |          |\n    |*         |     *    | s       *|       * O |*   *|  O*  * O   |OO  OOO* O|\n    +----------+----------+----------+-----------+-----+------------+----------+\n    +- map 11 -+- map 12 -+- map 13 --+-- map 14 --+-- map 15 --+--- map 16 ---+\n    |     sOO  |   O     O|    * *OO  |OO *      * |   *      OO|       *   *  |\n    |**   * *  |  O   OO O|           | O    * O  O|*   O    ** |    O     *  O|\n    |        O | O*   s*  |**O        |*   O  O*  *|O         O |  O     OO   *|\n    |O*  *  OOO|*    *  * | *OsO   O  |O O *       |  *    *O O | s      *     |\n    |*     OOO | O      OO|    *O OO  |O      OO s*|     **s O  |O O* O* OO    |\n    +----------+----------+-----------+------------+------------+--------------+\n\n# Notes\nAlso please share interesting maps you come up with, especially ones that your own solver cannot work around!\n\nIf you're stuck, [this](https://en.wikipedia.org/wiki/Maze_solving_algorithm) might help. If not, it's an interesting read anyway.\n\n# Credit\n\nThis challenge was suggested by /u/alfred300p. Have a good challenge idea? Consider submitting it to /r/dailyprogrammer_ideas.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4cw095", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 44, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 27, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4cw095/20160401_challenge_260_hard_never_ending_snake/", "locked": false, "name": "t3_4cw095", "created": 1459551170.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4cw095/20160401_challenge_260_hard_never_ending_snake/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-04-01] Challenge #260 [Hard] Never Ending Snake", "created_utc": 1459522370.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 44}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You have one rectangle composed of X*Y squares, with X being the width and Y being the height. You want to know how many squares you are going to collide if you were to draw a diagonal, meaning a line between the bottom-left edge and the top-right edge.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;2 unsigned integers X and Y&lt;/p&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Number of squares that collide with the diagonal.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs&lt;/h1&gt;\n\n&lt;p&gt;Sample Input 1 : 5 2\nSample Input 2 : 3 9&lt;/p&gt;\n\n&lt;h1&gt;Sample Outputs&lt;/h1&gt;\n\n&lt;p&gt;For this first case, the squares marked as X would collide with the diagonal :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;..XXX\nXXX..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;meaning the Sample Output 1 is 6&lt;/p&gt;\n\n&lt;p&gt;Sample Output 2 : 9 &lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;Input 0 : 3 9\nInput 1 : 21 2\nInput 2 : 168 189\nInput 3 : 100 101\nInput 4 : 123456789 987654321&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;For small numbers, you can output on the standard output which squares would collide, like so :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;..XXX\nXXX..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/Cobrand\"&gt;/u/Cobrand&lt;/a&gt;. Have a good challenge idea? Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nYou have one rectangle composed of X*Y squares, with X being the width and Y being the height. You want to know how many squares you are going to collide if you were to draw a diagonal, meaning a line between the bottom-left edge and the top-right edge.\n\n#Input Description\n\n2 unsigned integers X and Y\n\n#Output Description\n\nNumber of squares that collide with the diagonal.\n\n#Sample Inputs\n\nSample Input 1 : 5 2\nSample Input 2 : 3 9\n\n#Sample Outputs\n\nFor this first case, the squares marked as X would collide with the diagonal :\n\n    ..XXX\n    XXX..\n\nmeaning the Sample Output 1 is 6\n\nSample Output 2 : 9 \n\n# Challenge Input\n\nInput 0 : 3 9\nInput 1 : 21 2\nInput 2 : 168 189\nInput 3 : 100 101\nInput 4 : 123456789 987654321\n\n# Bonus\n\nFor small numbers, you can output on the standard output which squares would collide, like so :\n\n    ..XXX\n    XXX..\n    \n# Credit\n\nThis challenge was suggested by /u/Cobrand. Have a good challenge idea? Consider submitting it to /r/dailyprogrammer_ideas. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4cktc3", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 62, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 69, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4cktc3/20160330_challenge_260_intermediate_diagonal/", "locked": false, "name": "t3_4cktc3", "created": 1459374317.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4cktc3/20160330_challenge_260_intermediate_diagonal/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-03-30] Challenge #260 [Intermediate] Diagonal collision", "created_utc": 1459345517.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 62}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You just got a new garage door installed by the Automata&amp;#8482; Garage Door Company. You are having a lot of fun playing with the remote clicker, opening and closing the door, scaring your pets and annoying the neighbors.&lt;/p&gt;\n\n&lt;p&gt;The clicker is a one-button remote that works like this:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If the door is &lt;code&gt;OPEN&lt;/code&gt; or &lt;code&gt;CLOSED&lt;/code&gt;, clicking the button will cause the door to move, until it completes the cycle of opening or closing. &lt;/p&gt;\n\n&lt;p&gt;Door: Closed -&amp;gt; Button clicked -&amp;gt; Door: Opening -&amp;gt; Cycle complete -&amp;gt; Door: Open.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the door is currently opening or closing, clicking the button will make the door stop where it is. When clicked again, the door will go the opposite direction, until complete or the button is clicked again.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;We will assume the initial state is CLOSED.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;Input will be a series of commands (can be hard coded, no need to parse):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;button_clicked\ncycle_complete\nbutton_clicked\nbutton_clicked\nbutton_clicked\nbutton_clicked\nbutton_clicked\ncycle_complete\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;Output should be the state of the door and the input commands, such as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Door: CLOSED\n&amp;gt; Button clicked.\nDoor: OPENING\n&amp;gt; Cycle complete.\nDoor: OPEN\n&amp;gt; Button clicked.\nDoor: CLOSING\n&amp;gt; Button clicked.\nDoor: STOPPED_WHILE_CLOSING\n&amp;gt; Button clicked.\nDoor: OPENING\n&amp;gt; Button clicked.\nDoor: STOPPED_WHILE_OPENING\n&amp;gt; Button clicked.\nDoor: CLOSING\n&amp;gt; Cycle complete.\nDoor: CLOSED\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;This is an example of a simple &lt;a href=\"https://en.wikipedia.org/wiki/Finite-state_machine\"&gt;Finite State Machine&lt;/a&gt; with 6 States and 2 inputs.&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Bonus challenge - The door has an infrared beam near the bottom, and if something is breaking the beam, (your car, your cat, or a baby in a stroller) the door will be BLOCKED and will add the following rules:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If the door is currently CLOSING, it will reverse to OPENING until completely OPEN. It will remain BLOCKED, however, until the input BLOCK_CLEARED is called.&lt;/li&gt;\n&lt;li&gt;Any other state, it will remain in that position, until the input BLOCK_CLEARED is called, and then it will revert back to it&amp;#39;s prior state before it was blocked. Button clicks will be discarded. If the door was already in the process of opening, it will continue to OPEN until CYCLE_COMPLETE is called.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Bonus Challenge Input&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;button_clicked\ncycle_complete\nbutton_clicked\nblock_detected\nbutton_clicked\ncycle_complete\nbutton_clicked\nblock_cleared\nbutton_clicked\ncycle_complete\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Bonus Challenge output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Door: CLOSED\n&amp;gt; Button clicked\nDoor: OPENING\n&amp;gt; Cycle complete\nDoor: OPEN\n&amp;gt; Button Clicked\nDoor: CLOSING\n&amp;gt; Block detected!\nDoor: EMERGENCY_OPENING\n&amp;gt; Button clicked.\nDoor: EMERGENCY_OPENING\n&amp;gt; Cycle complete.\nDoor: OPEN_BLOCKED\n&amp;gt; Button clicked\nDoor: OPEN_BLOCKED\n&amp;gt; Block cleared\nDoor: OPEN\n&amp;gt; Button clicked\nDoor: CLOSING\n&amp;gt; Cycle complete\nDoor: CLOSED\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/Philboyd_Studge\"&gt;/u/Philboyd_Studge&lt;/a&gt; for this &lt;a href=\"https://www.reddit.com/r/dailyprogrammer_ideas/comments/3sggs4/easy_garage_door_opener/\"&gt;challenge idea&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\n You just got a new garage door installed by the Automata&amp;#8482; Garage Door Company. You are having a lot of fun playing with the remote clicker, opening and closing the door, scaring your pets and annoying the neighbors.\n\nThe clicker is a one-button remote that works like this:\n\n1. If the door is `OPEN` or `CLOSED`, clicking the button will cause the door to move, until it completes the cycle of opening or closing. \n\n    Door: Closed -&gt; Button clicked -&gt; Door: Opening -&gt; Cycle complete -&gt; Door: Open.\n\n2. If the door is currently opening or closing, clicking the button will make the door stop where it is. When clicked again, the door will go the opposite direction, until complete or the button is clicked again.\n\nWe will assume the initial state is CLOSED.\n\n#Formal Inputs &amp;amp; Outputs\n\n##Input description\n\nInput will be a series of commands (can be hard coded, no need to parse):\n\n    button_clicked\n    cycle_complete\n    button_clicked\n    button_clicked\n    button_clicked\n    button_clicked\n    button_clicked\n    cycle_complete\n\n##Output description\n\nOutput should be the state of the door and the input commands, such as:\n\n    Door: CLOSED\n    &gt; Button clicked.\n    Door: OPENING\n    &gt; Cycle complete.\n    Door: OPEN\n    &gt; Button clicked.\n    Door: CLOSING\n    &gt; Button clicked.\n    Door: STOPPED_WHILE_CLOSING\n    &gt; Button clicked.\n    Door: OPENING\n    &gt; Button clicked.\n    Door: STOPPED_WHILE_OPENING\n    &gt; Button clicked.\n    Door: CLOSING\n    &gt; Cycle complete.\n    Door: CLOSED\n\n#Notes/Hints\n\nThis is an example of a simple [Finite State Machine](https://en.wikipedia.org/wiki/Finite-state_machine) with 6 States and 2 inputs.\n\n#Bonus\n\nBonus challenge - The door has an infrared beam near the bottom, and if something is breaking the beam, (your car, your cat, or a baby in a stroller) the door will be BLOCKED and will add the following rules:\n\n1. If the door is currently CLOSING, it will reverse to OPENING until completely OPEN. It will remain BLOCKED, however, until the input BLOCK_CLEARED is called.\n2. Any other state, it will remain in that position, until the input BLOCK_CLEARED is called, and then it will revert back to it's prior state before it was blocked. Button clicks will be discarded. If the door was already in the process of opening, it will continue to OPEN until CYCLE_COMPLETE is called.\n\nBonus Challenge Input\n\n    button_clicked\n    cycle_complete\n    button_clicked\n    block_detected\n    button_clicked\n    cycle_complete\n    button_clicked\n    block_cleared\n    button_clicked\n    cycle_complete\n    \nBonus Challenge output:\n\n    Door: CLOSED\n    &gt; Button clicked\n    Door: OPENING\n    &gt; Cycle complete\n    Door: OPEN\n    &gt; Button Clicked\n    Door: CLOSING\n    &gt; Block detected!\n    Door: EMERGENCY_OPENING\n    &gt; Button clicked.\n    Door: EMERGENCY_OPENING\n    &gt; Cycle complete.\n    Door: OPEN_BLOCKED\n    &gt; Button clicked\n    Door: OPEN_BLOCKED\n    &gt; Block cleared\n    Door: OPEN\n    &gt; Button clicked\n    Door: CLOSING\n    &gt; Cycle complete\n    Door: CLOSED\n    \n    \n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\nThanks to /u/Philboyd_Studge for this [challenge idea](https://www.reddit.com/r/dailyprogrammer_ideas/comments/3sggs4/easy_garage_door_opener/).", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4cb7eh", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "G33kDude", "media": null, "score": 87, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 125, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4cb7eh/20160328_challenge_260_easy_garage_door_opener/", "locked": false, "name": "t3_4cb7eh", "created": 1459215524.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4cb7eh/20160328_challenge_260_easy_garage_door_opener/", "author_flair_text": "1 1", "quarantine": false, "title": "[2016-03-28] Challenge #260 [Easy] Garage Door Opener", "created_utc": 1459186724.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 87}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In most cases, humans use a decimal system. Scientists have suggested that this way to count things has been defined by our hands with 5 fingers each (total of 10 fingers). When the computer was developed, the binary system was implemented because of the two options that electricity allows (current or no current). Today, we\u2019ll throw practical sensibilities in the garbage and define a system to write all the integers that is based on operators and the static natural number sequence (integers 0 or higher).  Call it NOS (Natural Operator Sequence) base.&lt;/p&gt;\n\n&lt;h1&gt;Rules&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Each digit in a number represents one of 3 operators: -  &lt;code&gt;0: +&lt;/code&gt; &lt;code&gt;1: -&lt;/code&gt; &lt;code&gt;2: *&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;The length of the number (count of digits) limits the natural number sequence used.  A 4 digit number means the operators are inserted into the sequence &lt;code&gt;0 _ 1 _ 2 _ 3 _ 4&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Operators are inserted left to right, and there are no special precedence rules for &lt;code&gt;*&lt;/code&gt; multiplication.&lt;/li&gt;\n&lt;li&gt;The encoding used should use the fewest number of digits/operators possible:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Possible encodings of the number &lt;code&gt;10&lt;/code&gt; are:&lt;/p&gt;\n\n&lt;p&gt;0000 = 0 + 1 + 2 + 3 + 4&lt;br/&gt;\n0220 = 0 + 1 * 2 * 3 + 4&lt;br/&gt;\n02212 = 0 + 1 * 2 * 3 - 4 * 5  &lt;/p&gt;\n\n&lt;p&gt;Only the first 2 representations satisfy the 4th rule of being the shortest possible:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;optional 5th rule:&lt;/strong&gt;  As a tie break for &amp;quot;correct representation&amp;quot; use the representation with the most &lt;code&gt;0&lt;/code&gt;s (representing +), and optionally if still tied, use the representation that would sort first.  ex:  first above &lt;code&gt;0000&lt;/code&gt; representation of 10 has the most &lt;code&gt;0&lt;/code&gt;&amp;#39;s.  These tie breakers are arbitrary, and you may use any tie breaking scheme you want.&lt;/p&gt;\n\n&lt;p&gt;The number 2 can be represented as either &lt;code&gt;02&lt;/code&gt; or &lt;code&gt;20&lt;/code&gt;.  By optional last rule, &lt;code&gt;02&lt;/code&gt; is the &amp;quot;correct&amp;quot;  representation.&lt;/p&gt;\n\n&lt;h1&gt;1 easy: read NOS base numbers (optional)&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;:&lt;br/&gt;\n10020  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;:&lt;br/&gt;\n21  &lt;/p&gt;\n\n&lt;h1&gt;2 hard:  Find the shortest NOS representation of a decimal number&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;:&lt;br/&gt;\n21  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;:&lt;br/&gt;\n10020  &lt;/p&gt;\n\n&lt;p&gt;Find the shortest NOS representations for numbers up to say 50.&lt;/p&gt;\n\n&lt;h1&gt;Philosophy bonus:&lt;/h1&gt;\n\n&lt;p&gt;Speculate optimistically regarding interesting or practical features of using operators and a known sequence as a base system, or... merciless denigrate the optimistic fools that may dare propose thoughts.&lt;/p&gt;\n\n&lt;h1&gt;thanks to:&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"/u/jedidreyfus\"&gt;/u/jedidreyfus&lt;/a&gt; and &lt;a href=\"/u/cheers-\"&gt;/u/cheers-&lt;/a&gt; for the challenge idea they posted to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;   &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "In most cases, humans use a decimal system. Scientists have suggested that this way to count things has been defined by our hands with 5 fingers each (total of 10 fingers). When the computer was developed, the binary system was implemented because of the two options that electricity allows (current or no current). Today, we\u2019ll throw practical sensibilities in the garbage and define a system to write all the integers that is based on operators and the static natural number sequence (integers 0 or higher).  Call it NOS (Natural Operator Sequence) base.\n\n#Rules\n\n1. Each digit in a number represents one of 3 operators: -  `0: +` `1: -` `2: *`\n2. The length of the number (count of digits) limits the natural number sequence used.  A 4 digit number means the operators are inserted into the sequence `0 _ 1 _ 2 _ 3 _ 4`\n3. Operators are inserted left to right, and there are no special precedence rules for `*` multiplication.\n3. The encoding used should use the fewest number of digits/operators possible:\n\nPossible encodings of the number `10` are:\n\n0000 = 0 + 1 + 2 + 3 + 4   \n0220 = 0 + 1 * 2 * 3 + 4  \n02212 = 0 + 1 * 2 * 3 - 4 * 5  \n\nOnly the first 2 representations satisfy the 4th rule of being the shortest possible:\n\n**optional 5th rule:**  As a tie break for \"correct representation\" use the representation with the most `0`s (representing +), and optionally if still tied, use the representation that would sort first.  ex:  first above `0000` representation of 10 has the most `0`'s.  These tie breakers are arbitrary, and you may use any tie breaking scheme you want.\n\nThe number 2 can be represented as either `02` or `20`.  By optional last rule, `02` is the \"correct\"  representation.\n\n#1 easy: read NOS base numbers (optional)\n\n**input**:  \n10020  \n\n**output**:  \n21  \n\n# 2 hard:  Find the shortest NOS representation of a decimal number\n\n**input**:  \n21  \n\n**output**:  \n10020  \n\nFind the shortest NOS representations for numbers up to say 50.\n\n# Philosophy bonus:\n\nSpeculate optimistically regarding interesting or practical features of using operators and a known sequence as a base system, or... merciless denigrate the optimistic fools that may dare propose thoughts.\n\n# thanks to:\n\n/u/jedidreyfus and /u/cheers- for the challenge idea they posted to /r/dailyprogrammer_ideas   \n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4bwibm", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "score": 67, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 69, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1458917196.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4bwibm/20160325_challenge_259_hard_operator_number_system/", "locked": false, "name": "t3_4bwibm", "created": 1458942393.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4bwibm/20160325_challenge_259_hard_operator_number_system/", "author_flair_text": "3 2", "quarantine": false, "title": "[2016-03-25] Challenge #259 [Hard] Operator number system", "created_utc": 1458913593.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 67}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You are the biggest, baddest mahjong player around. Your enemies tremble at your presence on the battlefield, and you can barely walk ten steps before a fan begs you for an autograph.&lt;/p&gt;\n\n&lt;p&gt;However, you have a dark secret that would ruin you if it ever came to light. You&amp;#39;re terrible at determining whether a hand is a winning hand. For now, you&amp;#39;ve been able to bluff and bluster your way, but you know that one day you won&amp;#39;t be able to get away with it.&lt;/p&gt;\n\n&lt;p&gt;As such, you&amp;#39;ve decided to write a program to assist you!&lt;/p&gt;\n\n&lt;h2&gt;Further Details&lt;/h2&gt;\n\n&lt;p&gt;Mahjong (not to be confused with &lt;a href=\"http://en.wikipedia.org/wiki/Mahjong_solitaire\"&gt;mahjong solitaire&lt;/a&gt;) is a game where hands are composed from combinations of tiles. There are a number of variants of mahjong, but for this challenge, we will consider a simplified variant of Japanese Mahjong which is also known as Riichi Mahjong.&lt;/p&gt;\n\n&lt;h2&gt;Basic Version&lt;/h2&gt;\n\n&lt;p&gt;There are three suits in this variant, &amp;quot;Bamboo&amp;quot;, &amp;quot;Circle&amp;quot; and &amp;quot;Character&amp;quot;. Every tile that belongs to these suits has a value that ranges from 1 - 9.&lt;/p&gt;\n\n&lt;p&gt;To complete a hand, tiles are organised into groups. If every tile in a hand belongs to a single group (and each tile can only be used once), the hand is a winning hand.&lt;/p&gt;\n\n&lt;p&gt;For now, we shall consider the groups &amp;quot;Pair&amp;quot;, &amp;quot;Set&amp;quot; and &amp;quot;Sequence&amp;quot;. They are composed as follows:&lt;/p&gt;\n\n&lt;p&gt;Pair - Two tiles with the same suit and value&lt;/p&gt;\n\n&lt;p&gt;Set - Three tiles with the same suit and value&lt;/p&gt;\n\n&lt;p&gt;Sequence - Three tiles with the same suit, and which increment in value, such as &amp;quot;Circle 2, Circle 3, Circle 4&amp;quot;. There is no value wrapping so &amp;quot;Circle 9, Circle 1, Circle 2&amp;quot; would not be considered valid.&lt;/p&gt;\n\n&lt;p&gt;A hand is composed of 14 tiles.&lt;/p&gt;\n\n&lt;h2&gt;Bonus 1 - Adding Quads&lt;/h2&gt;\n\n&lt;p&gt;There is actually a fourth group called a &amp;quot;Quad&amp;quot;. It is just like a pair and a set, except it is composed of four tiles.&lt;/p&gt;\n\n&lt;p&gt;What makes this group special is that a hand containing quads will actually have a hand larger than 14, 1 for every quad. This is fine, as long as there is &lt;em&gt;1, and only 1 pair&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Bonus 2 - Adding Honour Tiles&lt;/h2&gt;\n\n&lt;p&gt;In addition to the tiles belonging to the three suits, there are 7 additional tiles. These tiles have no value, and are collectively known as &amp;quot;honour&amp;quot; tiles.&lt;/p&gt;\n\n&lt;p&gt;As they have no value, they cannot be members of a sequence. Furthermore, they can only be part of a set or pair with tiles that are exactly the same. For example, &amp;quot;Red Dragon, Red Dragon, Red Dragon&amp;quot; would be a valid set, but &amp;quot;Red Dragon, Green Dragon, Red Dragon&amp;quot; would not.&lt;/p&gt;\n\n&lt;p&gt;These additional tiles are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Green Dragon&lt;/li&gt;\n&lt;li&gt;Red Dragon&lt;/li&gt;\n&lt;li&gt;White Dragon&lt;/li&gt;\n&lt;li&gt;North Wind&lt;/li&gt;\n&lt;li&gt;East Wind&lt;/li&gt;\n&lt;li&gt;South Wind&lt;/li&gt;\n&lt;li&gt;West Wind&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Bonus 3 - Seven Pairs&lt;/h2&gt;\n\n&lt;p&gt;There are a number of special hands that are an exception to the above rules. One such hand is &amp;quot;Seven Pairs&amp;quot;. As the name suggests, it is a hand composed of seven pairs.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;h3&gt;Basic&lt;/h3&gt;\n\n&lt;p&gt;You will be provided with N on a single line, followed by N lines of the following format:&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;tile suit&amp;gt;,&amp;lt;value&amp;gt;&lt;/p&gt;\n\n&lt;h3&gt;Bonus 2&lt;/h3&gt;\n\n&lt;p&gt;In addition, the lines may be of the format:&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;honour tile&amp;gt;&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;You should output whether the hand is a winning hand or not.&lt;/p&gt;\n\n&lt;h1&gt;Sample Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Sample Input (Standard)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;14\nCircle,4\nCircle,5\nCircle,6\nBamboo,1\nBamboo,2\nBamboo,3\nCharacter,2\nCharacter,2\nCharacter,2\nCircle,1\nCircle,1\nBamboo,7\nBamboo,8\nBamboo,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Standard)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Standard)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;14\nCircle,4\nBamboo,1\nCircle,5\nBamboo,2\nCharacter,2\nBamboo,3\nCharacter,2\nCircle,6\nCharacter,2\nCircle,1\nBamboo,8\nCircle,1\nBamboo,7\nBamboo,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Standard)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Standard)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;14\nCircle,4\nCircle,5\nCircle,6\nCircle,4\nCircle,5\nCircle,6\nCircle,1\nCircle,1\nBamboo,7\nBamboo,8\nBamboo,9\nCircle,4\nCircle,5\nCircle,6\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Standard)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Bonus 1)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;15\nCircle,4\nCircle,5\nCircle,6\nBamboo,1\nBamboo,2\nBamboo,3\nCharacter,2\nCharacter,2\nCharacter,2\nCharacter,2\nCircle,1\nCircle,1\nBamboo,7\nBamboo,8\nBamboo,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Bonus 1)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Bonus 1)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;16\nCircle,4\nCircle,5\nCircle,6\nBamboo,1\nBamboo,2\nBamboo,3\nCharacter,2\nCharacter,2\nCharacter,2\nCharacter,2\nCircle,1\nCircle,1\nCircle,1\nBamboo,7\nBamboo,8\nBamboo,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Bonus 1)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Not a winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Bonus 2)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;14\nCircle,4\nCircle,5\nCircle,6\nBamboo,1\nBamboo,2\nBamboo,3\nRed Dragon\nRed Dragon\nRed Dragon\nCircle,1\nCircle,1\nBamboo,7\nBamboo,8\nBamboo,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Bonus 2)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Bonus 2)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;14\nCircle,4\nCircle,5\nCircle,6\nBamboo,1\nBamboo,2\nBamboo,3\nRed Dragon\nGreen Dragon\nWhite Dragon\nCircle,1\nCircle,1\nBamboo,7\nBamboo,8\nBamboo,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Bonus 2)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Not a winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Input (Bonus 3)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;14\nCircle,4\nCircle,4\nCharacter,5\nCharacter,5\nBamboo,5\nBamboo,5\nCircle,5\nCircle,5\nCircle,7\nCircle,7\nCircle,9\nCircle,9\nCircle,9\nCircle,9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample Output (Bonus 3)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Winning hand\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;None of the bonus components depend on each other, and can be implemented in any order. The test cases do not presume completion of earlier bonus components. The order is just the recommended implementation order.&lt;/p&gt;\n\n&lt;p&gt;Many thanks to Redditor &lt;a href=\"/u/oketa\"&gt;/u/oketa&lt;/a&gt; for this submission to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;. If you have any ideas, please submit them there!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nYou are the biggest, baddest mahjong player around. Your enemies tremble at your presence on the battlefield, and you can barely walk ten steps before a fan begs you for an autograph.\n\nHowever, you have a dark secret that would ruin you if it ever came to light. You're terrible at determining whether a hand is a winning hand. For now, you've been able to bluff and bluster your way, but you know that one day you won't be able to get away with it.\n\nAs such, you've decided to write a program to assist you!\n\n## Further Details\n\nMahjong (not to be confused with [mahjong solitaire](http://en.wikipedia.org/wiki/Mahjong_solitaire)) is a game where hands are composed from combinations of tiles. There are a number of variants of mahjong, but for this challenge, we will consider a simplified variant of Japanese Mahjong which is also known as Riichi Mahjong.\n\n## Basic Version\nThere are three suits in this variant, \"Bamboo\", \"Circle\" and \"Character\". Every tile that belongs to these suits has a value that ranges from 1 - 9.\n\nTo complete a hand, tiles are organised into groups. If every tile in a hand belongs to a single group (and each tile can only be used once), the hand is a winning hand.\n\nFor now, we shall consider the groups \"Pair\", \"Set\" and \"Sequence\". They are composed as follows:\n\nPair - Two tiles with the same suit and value\n\nSet - Three tiles with the same suit and value\n\nSequence - Three tiles with the same suit, and which increment in value, such as \"Circle 2, Circle 3, Circle 4\". There is no value wrapping so \"Circle 9, Circle 1, Circle 2\" would not be considered valid.\n\nA hand is composed of 14 tiles.\n\n## Bonus 1 - Adding Quads\n\nThere is actually a fourth group called a \"Quad\". It is just like a pair and a set, except it is composed of four tiles.\n\nWhat makes this group special is that a hand containing quads will actually have a hand larger than 14, 1 for every quad. This is fine, as long as there is *1, and only 1 pair*.\n\n## Bonus 2 - Adding Honour Tiles\n\nIn addition to the tiles belonging to the three suits, there are 7 additional tiles. These tiles have no value, and are collectively known as \"honour\" tiles.\n\nAs they have no value, they cannot be members of a sequence. Furthermore, they can only be part of a set or pair with tiles that are exactly the same. For example, \"Red Dragon, Red Dragon, Red Dragon\" would be a valid set, but \"Red Dragon, Green Dragon, Red Dragon\" would not.\n\nThese additional tiles are:\n\n* Green Dragon\n* Red Dragon\n* White Dragon\n* North Wind\n* East Wind\n* South Wind\n* West Wind\n\n## Bonus 3 - Seven Pairs\n\nThere are a number of special hands that are an exception to the above rules. One such hand is \"Seven Pairs\". As the name suggests, it is a hand composed of seven pairs.\n\n# Formal Inputs &amp; Outputs\n\n## Input description\n\n### Basic\n\nYou will be provided with N on a single line, followed by N lines of the following format:\n\n&lt;tile suit&gt;,&lt;value&gt;\n\n### Bonus 2\n\nIn addition, the lines may be of the format:\n\n&lt;honour tile&gt;\n\n## Output description\n\nYou should output whether the hand is a winning hand or not.\n\n# Sample Inputs and Outputs\n\n## Sample Input (Standard)\n\n    14\n    Circle,4\n    Circle,5\n    Circle,6\n    Bamboo,1\n    Bamboo,2\n    Bamboo,3\n    Character,2\n    Character,2\n    Character,2\n    Circle,1\n    Circle,1\n    Bamboo,7\n    Bamboo,8\n    Bamboo,9\n\n## Sample Output (Standard)\n\n    Winning hand\n\n## Sample Input (Standard)\n\n    14\n    Circle,4\n    Bamboo,1\n    Circle,5\n    Bamboo,2\n    Character,2\n    Bamboo,3\n    Character,2\n    Circle,6\n    Character,2\n    Circle,1\n    Bamboo,8\n    Circle,1\n    Bamboo,7\n    Bamboo,9\n\n## Sample Output (Standard)\n\n    Winning hand\n\n## Sample Input (Standard)\n\n    14\n    Circle,4\n    Circle,5\n    Circle,6\n    Circle,4\n    Circle,5\n    Circle,6\n    Circle,1\n    Circle,1\n    Bamboo,7\n    Bamboo,8\n    Bamboo,9\n    Circle,4\n    Circle,5\n    Circle,6\n\n## Sample Output (Standard)\n\n    Winning hand\n\n## Sample Input (Bonus 1)\n\n    15\n    Circle,4\n    Circle,5\n    Circle,6\n    Bamboo,1\n    Bamboo,2\n    Bamboo,3\n    Character,2\n    Character,2\n    Character,2\n    Character,2\n    Circle,1\n    Circle,1\n    Bamboo,7\n    Bamboo,8\n    Bamboo,9\n\n## Sample Output (Bonus 1)\n\n    Winning hand\n\n## Sample Input (Bonus 1)\n\n    16\n    Circle,4\n    Circle,5\n    Circle,6\n    Bamboo,1\n    Bamboo,2\n    Bamboo,3\n    Character,2\n    Character,2\n    Character,2\n    Character,2\n    Circle,1\n    Circle,1\n    Circle,1\n    Bamboo,7\n    Bamboo,8\n    Bamboo,9\n\n## Sample Output (Bonus 1)\n\n    Not a winning hand\n\n## Sample Input (Bonus 2)\n\n    14\n    Circle,4\n    Circle,5\n    Circle,6\n    Bamboo,1\n    Bamboo,2\n    Bamboo,3\n    Red Dragon\n    Red Dragon\n    Red Dragon\n    Circle,1\n    Circle,1\n    Bamboo,7\n    Bamboo,8\n    Bamboo,9\n\n## Sample Output (Bonus 2)\n\n    Winning hand\n\n## Sample Input (Bonus 2)\n\n    14\n    Circle,4\n    Circle,5\n    Circle,6\n    Bamboo,1\n    Bamboo,2\n    Bamboo,3\n    Red Dragon\n    Green Dragon\n    White Dragon\n    Circle,1\n    Circle,1\n    Bamboo,7\n    Bamboo,8\n    Bamboo,9\n\n## Sample Output (Bonus 2)\n\n    Not a winning hand\n\n## Sample Input (Bonus 3)\n\n    14\n    Circle,4\n    Circle,4\n    Character,5\n    Character,5\n    Bamboo,5\n    Bamboo,5\n    Circle,5\n    Circle,5\n    Circle,7\n    Circle,7\n    Circle,9\n    Circle,9\n    Circle,9\n    Circle,9\n\n## Sample Output (Bonus 3)\n\n    Winning hand\n\n# Notes\n\nNone of the bonus components depend on each other, and can be implemented in any order. The test cases do not presume completion of earlier bonus components. The order is just the recommended implementation order.\n\nMany thanks to Redditor /u/oketa for this submission to /r/dailyprogrammer_ideas. If you have any ideas, please submit them there!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4bmdwz", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 53, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 53, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4bmdwz/20160323_challenge_259_intermediate_mahjong_hands/", "locked": false, "name": "t3_4bmdwz", "created": 1458767393.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4bmdwz/20160323_challenge_259_intermediate_mahjong_hands/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-03-23] Challenge #259 [Intermediate] Mahjong Hands", "created_utc": 1458738593.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 53}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Clarence is a data entry clerk who works at an internet service provider. His job is to manually enter the IP addresses of all of the ISP&amp;#39;s customers into the database. He does this using a keypad which has the following layout:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th align=\"center\"&gt;&lt;code&gt;1&lt;/code&gt;&lt;/th&gt;\n&lt;th align=\"center\"&gt;&lt;code&gt;2&lt;/code&gt;&lt;/th&gt;\n&lt;th align=\"center\"&gt;&lt;code&gt;3&lt;/code&gt;&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;6&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;7&lt;/code&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;8&lt;/code&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;9&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;\n&lt;td align=\"center\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;The distance between the centre of horizontally or vertically adjacent keys is exactly one centimetre. For instance, the distance between the centres of &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;9&lt;/code&gt; would be two centimetres. The distance between the centres of &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; would be sqrt 2cm. The Pythagoras theorem is sufficient to calculate the distance between any two keys.&lt;/p&gt;\n\n&lt;p&gt;Clarence, as you might expect from one who works in an ISP, uses a very slow and inefficient system of typing. He uses a single finger and searches for the key, and then moves his finger to the key, then presses it, and repeats for all of the digits in the number. You might know of this style as the &amp;quot;eagle search system&amp;quot; since the finger searches above the keyboard for the correct key before plunging down for the keypress, like an eagle plunging down for a kill.&lt;/p&gt;\n\n&lt;p&gt;For example, here is how Clarence would type out the number &lt;code&gt;7851&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;He starts his finger at &lt;code&gt;7&lt;/code&gt; and pushes the key.&lt;/li&gt;\n&lt;li&gt;He moves his finger to the right 1cm to &lt;code&gt;8&lt;/code&gt; and pushes the key.&lt;/li&gt;\n&lt;li&gt;He moves his finger upwards 1cm to &lt;code&gt;5&lt;/code&gt;  and pushes the key.&lt;/li&gt;\n&lt;li&gt;He moves his finger diagonally upwards and left sqrt 2cm to &lt;code&gt;1&lt;/code&gt; and pushes the key.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Therefore the total distance that Clarence moved his finger to type in &lt;code&gt;7851&lt;/code&gt; is &lt;code&gt;1 + 1 + sqrt 2&lt;/code&gt; which is about 3.41cm.&lt;/p&gt;\n\n&lt;p&gt;Your task is to write a program that calculates the distance Clarence must move his finger to type in arbitrary IP addresses.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;Input is a string that will be in the form&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;().().().()&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;where each &lt;code&gt;()&lt;/code&gt; is an integer in the range &lt;code&gt;0&lt;/code&gt; - &lt;code&gt;999&lt;/code&gt;. This represents the IP address that Clarence must type in. An example input might be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;219.45.143.143\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I would also like to point out that inputs such as &lt;code&gt;0.42.42.42&lt;/code&gt; or &lt;code&gt;999.999.999.999&lt;/code&gt; are still valid inputs, despite the fact that they are invalid IP addresses. So you don&amp;#39;t need to include any IP address verification code in your program.&lt;/p&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;Output the distance that Clarence must move his finger in order to type in the specified IP address. Round answers to two decimal places where needed, and use the &lt;code&gt;cm&lt;/code&gt; unit in your output. The output for the example input is &lt;code&gt;27.38cm&lt;/code&gt; (1 + sqrt 8 + sqrt 5 + 2 + 1 + sqrt 5 + 3 + 1 + sqrt 5 + sqrt 13 + 3 + 1 + sqrt 5).&lt;/p&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/katyai\"&gt;/u/katyai&lt;/a&gt;. If you have any challenge ideas please share them on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use them!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nClarence is a data entry clerk who works at an internet service provider. His job is to manually enter the IP addresses of all of the ISP's customers into the database. He does this using a keypad which has the following layout:\n\n|`1`|`2`|`3`|\n|:--:|:--:|:--:|\n|`4`|`5`|`6`|\n|`7`|`8`|`9`|\n|`.`|`0`||\n\nThe distance between the centre of horizontally or vertically adjacent keys is exactly one centimetre. For instance, the distance between the centres of `3` and `9` would be two centimetres. The distance between the centres of `3` and `5` would be sqrt 2cm. The Pythagoras theorem is sufficient to calculate the distance between any two keys.\n\nClarence, as you might expect from one who works in an ISP, uses a very slow and inefficient system of typing. He uses a single finger and searches for the key, and then moves his finger to the key, then presses it, and repeats for all of the digits in the number. You might know of this style as the \"eagle search system\" since the finger searches above the keyboard for the correct key before plunging down for the keypress, like an eagle plunging down for a kill.\n\nFor example, here is how Clarence would type out the number `7851`:\n\n 1. He starts his finger at `7` and pushes the key.\n 2. He moves his finger to the right 1cm to `8` and pushes the key.\n 3. He moves his finger upwards 1cm to `5`  and pushes the key.\n 4. He moves his finger diagonally upwards and left sqrt 2cm to `1` and pushes the key.\n\nTherefore the total distance that Clarence moved his finger to type in `7851` is `1 + 1 + sqrt 2` which is about 3.41cm.\n\nYour task is to write a program that calculates the distance Clarence must move his finger to type in arbitrary IP addresses.\n\n#Formal Inputs and Outputs\n\n##Input Description\n\nInput is a string that will be in the form\n\n`().().().()`\n\nwhere each `()` is an integer in the range `0` - `999`. This represents the IP address that Clarence must type in. An example input might be:\n\n    219.45.143.143\n\nI would also like to point out that inputs such as `0.42.42.42` or `999.999.999.999` are still valid inputs, despite the fact that they are invalid IP addresses. So you don't need to include any IP address verification code in your program.\n\n##Output Description\n\nOutput the distance that Clarence must move his finger in order to type in the specified IP address. Round answers to two decimal places where needed, and use the `cm` unit in your output. The output for the example input is `27.38cm` (1 + sqrt 8 + sqrt 5 + 2 + 1 + sqrt 5 + 3 + 1 + sqrt 5 + sqrt 13 + 3 + 1 + sqrt 5).\n\n# Credit\n\nThis challenge was suggested by /u/katyai. If you have any challenge ideas please share them on /r/dailyprogrammer_ideas and there's a good chance we'll use them!\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4bc3el", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 101, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 156, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4bc3el/20160321_challenge_259_easy_clarence_the_slow/", "locked": false, "name": "t3_4bc3el", "created": 1458593003.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4bc3el/20160321_challenge_259_easy_clarence_the_slow/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-03-21] Challenge #259 [Easy] Clarence the Slow Typist", "created_utc": 1458564203.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 101}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In the previous two challenges the main focus has been on automated actions. Today we will be focusing on manual inputs.\nInstead of being a chat bot, today&amp;#39;s project will be a chat client.&lt;/p&gt;\n\n&lt;p&gt;Your client must allow for simultaneous input and output, so that the user can read messages while writing their own\nresponse. It should allow the user to join and chat to multiple channels, as well as read the outputs of those channels.\nThey should also be able to leave (part) those channels, and message specific users directly.&lt;/p&gt;\n\n&lt;p&gt;It must also keep track of which users are in what channels. When you first join a channel, you will receive a list of\nnicks that are currently in that channel. This will come as one or more messages &lt;code&gt;RPL_NAMREPLY&lt;/code&gt; which is defined as &lt;code&gt;353&lt;/code&gt;.\nThese names will sometimes be prefixed by symbols indicating special operator status, but for our purposes that can be\nignored or discarded. The &lt;code&gt;=&lt;/code&gt; message parameter can also be discarded, as it holds no specific meaning. Once the server has\nfinished sending &lt;code&gt;RPL_NAMEREPLY&lt;/code&gt; messages, it will send an &lt;code&gt;RPL_ENDOFNAMES&lt;/code&gt; message, which is defined as &lt;code&gt;366&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:wolfe.freenode.net 353 GeekBot = #reddit-dailyprogrammer :GeekBot Blackshell @GeekDude +jose_ +j-bot\n:wolfe.freenode.net 366 GeekBot #reddit-dailyprogrammer :End of /NAMES list.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;Initial program input is the same as Monday&amp;#39;s challenge. However, in addition to this there should be an input field\nthat the user can use to send chat messages and specify chat messages and commands.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;chat.freenode.net:6667\nNickname\nUsername\nReal Name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because you can be joined to multiple channels at once, there must be one channel selected for your messages to be sent to.\nThis will be referred to as the &amp;#39;current output channel&amp;#39;. Whenever you send a message, it will be sent to the current\noutput channel, which can be any of the channels you are currently joined to. You must be able to switch between these\nchannels through chat commands, or through an optional mouseable interface.&lt;/p&gt;\n\n&lt;p&gt;And as for chat commands, the following should be supported. Braces &lt;code&gt;[]&lt;/code&gt; denote optional fields. &lt;code&gt;//&lt;/code&gt; denotes comment.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/join #channel    // Joins a channel\n/part [#channel]  // Parts a specified channel, or the current output channel\n/quit             // Sends a QUIT message and closes the connection\n/msg user private message // Sends a message to a user directly\n/nicks [#channel] // Lists the nicks joined to a specified channel, or the current output channel\n/channel #channel // Changes the current output channel\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;There should be an output field that shows parsed messages in the following format:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[HH:MM] GeekBot has joined #rdp\n[HH:MM] #rdp &amp;lt;GeekBot&amp;gt; Hey, is anyone here?\n[HH:MM] GeekDude has joined #rdp\n[HH:MM] #rdp &amp;lt;GeekDude&amp;gt; Oh, hey GeekBot.\n[HH:MM] GeekBot has joined #reddit-dailyprogrammer\n[HH:MM] #reddit-dailyprogrammer &amp;lt;GeekBot&amp;gt; This is a test message\n[HH:MM] GeekBot has parted #rdp\n[HH:MM] GeekBot &amp;lt;GeekDude&amp;gt; This is a private message\n[HH:MM] GeekBot has parted #reddit-dailyprogrammer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It should show the joins/parts of any users, including yourself. Outgoing messages should be shown as well as incoming.&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;Keep separate logs for each channel, and only populate the output field with messages from the current output channel.&lt;/p&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;Because you no longer have to specify where a message is coming from, the message log should be formatted as follows:&lt;/p&gt;\n\n&lt;p&gt;#reddit-dailyprogrammer&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[HH:MM] GeekBot has joined #reddit-dailyprogrammer\n[HH:MM] &amp;lt;GeekBot&amp;gt; This is a test message\n[HH:MM] &amp;lt;jose_&amp;gt; This conversation is entirely made up\n[HH:MM] &amp;lt;GeekBot&amp;gt; Yes, yes it is. Got to go!\n[HH:MM] GeekBot has parted #reddit-dailyprogrammer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;#rdp&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[HH:MM] GeekBot has joined #rdp\n[HH:MM] &amp;lt;GeekBot&amp;gt; Hey, is anyone here?\n[HH:MM] GeekDude has joined #rdp\n[HH:MM] &amp;lt;GeekDude&amp;gt; Oh, hey GeekBot.\n[HH:MM] &amp;lt;GeekBot&amp;gt; What&amp;#39;s up GeekDude?\n[HH:MM] GeekDude has parted #rdp\n[HH:MM] &amp;lt;GeekBot&amp;gt; Guess he won&amp;#39;t be replying...\n[HH:MM] GeekBot has parted #rdp\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;GeekDude (not technically a channel, but it should go into its own section for the individual messager)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[HH:MM] GeekBot &amp;lt;GeekDude&amp;gt; This is a private message. Sorry for parting without replying to your message.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Allow the user to connect to multiple servers. You should be able to accept a comma separated list of servers in the\ninitial input, as well as allow the user to connect to or switch between servers using the &lt;code&gt;/server server [port]&lt;/code&gt; command.\nPort is optional and should default to 6667.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;To verify your code is joining channels and chatting correctly, I suggest joining the channel in advance using an already\nfinished IRC client, such as the web based &lt;a href=\"http://webchat.freenode.net/\"&gt;http://webchat.freenode.net/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can see the full original IRC specification at &lt;a href=\"https://tools.ietf.org/html/rfc1459\"&gt;https://tools.ietf.org/html/rfc1459&lt;/a&gt;. See also, &lt;a href=\"http://ircdocs.horse/specs/\"&gt;http://ircdocs.horse/specs/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://mybuddymichael.com/writings/a-regular-expression-for-irc-messages.html\"&gt;A Regular Expression For IRC Messages&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nIn the previous two challenges the main focus has been on automated actions. Today we will be focusing on manual inputs.\nInstead of being a chat bot, today's project will be a chat client.\n\nYour client must allow for simultaneous input and output, so that the user can read messages while writing their own\nresponse. It should allow the user to join and chat to multiple channels, as well as read the outputs of those channels.\nThey should also be able to leave (part) those channels, and message specific users directly.\n\nIt must also keep track of which users are in what channels. When you first join a channel, you will receive a list of\nnicks that are currently in that channel. This will come as one or more messages `RPL_NAMREPLY` which is defined as `353`.\nThese names will sometimes be prefixed by symbols indicating special operator status, but for our purposes that can be\nignored or discarded. The `=` message parameter can also be discarded, as it holds no specific meaning. Once the server has\nfinished sending `RPL_NAMEREPLY` messages, it will send an `RPL_ENDOFNAMES` message, which is defined as `366`.\n\n    :wolfe.freenode.net 353 GeekBot = #reddit-dailyprogrammer :GeekBot Blackshell @GeekDude +jose_ +j-bot\n    :wolfe.freenode.net 366 GeekBot #reddit-dailyprogrammer :End of /NAMES list.\n\n# Input Description\n\nInitial program input is the same as Monday's challenge. However, in addition to this there should be an input field\nthat the user can use to send chat messages and specify chat messages and commands.\n\n    chat.freenode.net:6667\n    Nickname\n    Username\n    Real Name\n\nBecause you can be joined to multiple channels at once, there must be one channel selected for your messages to be sent to.\nThis will be referred to as the 'current output channel'. Whenever you send a message, it will be sent to the current\noutput channel, which can be any of the channels you are currently joined to. You must be able to switch between these\nchannels through chat commands, or through an optional mouseable interface.\n\nAnd as for chat commands, the following should be supported. Braces `[]` denote optional fields. `//` denotes comment.\n\n    /join #channel    // Joins a channel\n    /part [#channel]  // Parts a specified channel, or the current output channel\n    /quit             // Sends a QUIT message and closes the connection\n    /msg user private message // Sends a message to a user directly\n    /nicks [#channel] // Lists the nicks joined to a specified channel, or the current output channel\n    /channel #channel // Changes the current output channel\n\n# Output Description\n\nThere should be an output field that shows parsed messages in the following format:\n\n    [HH:MM] GeekBot has joined #rdp\n    [HH:MM] #rdp &lt;GeekBot&gt; Hey, is anyone here?\n    [HH:MM] GeekDude has joined #rdp\n    [HH:MM] #rdp &lt;GeekDude&gt; Oh, hey GeekBot.\n    [HH:MM] GeekBot has joined #reddit-dailyprogrammer\n    [HH:MM] #reddit-dailyprogrammer &lt;GeekBot&gt; This is a test message\n    [HH:MM] GeekBot has parted #rdp\n    [HH:MM] GeekBot &lt;GeekDude&gt; This is a private message\n    [HH:MM] GeekBot has parted #reddit-dailyprogrammer\n\nIt should show the joins/parts of any users, including yourself. Outgoing messages should be shown as well as incoming.\n\n# Challenge Input\n\nKeep separate logs for each channel, and only populate the output field with messages from the current output channel.\n\n# Challenge Output\n\nBecause you no longer have to specify where a message is coming from, the message log should be formatted as follows:\n\n\\#reddit-dailyprogrammer\n\n    [HH:MM] GeekBot has joined #reddit-dailyprogrammer\n    [HH:MM] &lt;GeekBot&gt; This is a test message\n    [HH:MM] &lt;jose_&gt; This conversation is entirely made up\n    [HH:MM] &lt;GeekBot&gt; Yes, yes it is. Got to go!\n    [HH:MM] GeekBot has parted #reddit-dailyprogrammer\n\n\\#rdp\n\n    [HH:MM] GeekBot has joined #rdp\n    [HH:MM] &lt;GeekBot&gt; Hey, is anyone here?\n    [HH:MM] GeekDude has joined #rdp\n    [HH:MM] &lt;GeekDude&gt; Oh, hey GeekBot.\n    [HH:MM] &lt;GeekBot&gt; What's up GeekDude?\n    [HH:MM] GeekDude has parted #rdp\n    [HH:MM] &lt;GeekBot&gt; Guess he won't be replying...\n    [HH:MM] GeekBot has parted #rdp\n\nGeekDude (not technically a channel, but it should go into its own section for the individual messager)\n\n    [HH:MM] GeekBot &lt;GeekDude&gt; This is a private message. Sorry for parting without replying to your message.\n\n# Bonus\n\nAllow the user to connect to multiple servers. You should be able to accept a comma separated list of servers in the\ninitial input, as well as allow the user to connect to or switch between servers using the `/server server [port]` command.\nPort is optional and should default to 6667.\n\n# Notes\n\nTo verify your code is joining channels and chatting correctly, I suggest joining the channel in advance using an already\nfinished IRC client, such as the web based http://webchat.freenode.net/.\n\nYou can see the full original IRC specification at https://tools.ietf.org/html/rfc1459. See also, http://ircdocs.horse/specs/.\n\n[A Regular Expression For IRC Messages](https://mybuddymichael.com/writings/a-regular-expression-for-irc-messages.html)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4ayjla", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "G33kDude", "media": null, "score": 87, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 12, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1458448403.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4ayjla/challenge_258_hard_irc_interactivity/", "locked": false, "name": "t3_4ayjla", "created": 1458340393.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4ayjla/challenge_258_hard_irc_interactivity/", "author_flair_text": "1 1", "quarantine": false, "title": "Challenge #258 [Hard] IRC: Interactivity", "created_utc": 1458311593.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 87}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In the last challenge we initiated a connection to an IRC server. This time we are going to utilise that connection by\nresponding to user input. On an IRC server you can communicate with other users either directly, or in a group chatroom\nknown as a channel. Channel names are distinguished from users by a prefixed character (&lt;code&gt;#&lt;/code&gt; on freenode) in the name.&lt;/p&gt;\n\n&lt;p&gt;After connecting to an IRC server you will receive some informational text from the server known as the Message Of The Day,\nor MOTD. The server will buffer any messages (particularly attempts to join channels) sent before it has finished.\nThe end of the MOTD is marked by the message &lt;code&gt;RPL_ENDOFMOTD&lt;/code&gt; which is defined as the number &lt;code&gt;376&lt;/code&gt;. You don&amp;#39;t necessarily\nhave to wait for the end of the MOTD before joining, but I&amp;#39;ve found it usually works better if you do.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:wolfe.freenode.net 376 GeekBot :End of /MOTD command.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To join a channel you must use the &lt;code&gt;JOIN&lt;/code&gt; message. It takes a single parameter, which is a comma separated list of one or\nmore channels.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;JOIN #reddit-dailyprogrammer,#botters-test\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once you have sent this message, you will receive one or more JOIN message(s) back from the server for every channel\nyou were successfully able to join. The message you receive back will be prefixed with yourself as the origin.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #reddit-dailyprogrammer\n:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #botters-test\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After you&amp;#39;ve been joined to the channel, you can send text to the channel using the &lt;code&gt;PRIVMSG&lt;/code&gt; message. It takes two\nparameters, the first being the the comma separated list of users or channels to send the text to, and the second being the\ncolon prefixed message text.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PRIVMSG #reddit-dailyprogrammer :Hello World!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In addition to being able to send messages, you can receive messages that have been sent to the channel by other users.\nYou should listen for a phrase prefixed with your name, then respond to that chat message. For example, you might see\nthe following chat message.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG #ahkscript :GeekBot: random 20\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your code would parse this message, and see the chatted contents were &lt;code&gt;GeekBot: random 20&lt;/code&gt;. In response, your program might\ndo something like generate a random number, and chat it back.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PRIVMSG #ahkscript :GeekDude: 4 // chosen by fair 20 sided dice roll // guaranteed to be random\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;In addition to the input from last time&amp;#39;s challenge, there will also be two line specifying a channel to join, and a\nmessage to chat upon joining.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;chat.freenode.net:6667\nNickname\nUsername\nReal Name\n#reddit-dailyprogrammer,#rdp,#botters-test\nHello World!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;In addition to the last challenge&amp;#39;s output, you must also pick and respond to one or more chat commands. These commands\nmust take at least one parameter, and the return value should be chatted back to the same channel prefixed with the nick\nof the person who invoked the command.&lt;/p&gt;\n\n&lt;p&gt;The following code block has the prefix &lt;code&gt;&amp;gt;&lt;/code&gt; for outgoing messages, and &lt;code&gt;&amp;lt;&lt;/code&gt; for incoming messages.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;NICK Nickname\n&amp;gt;USER Username 0 * :Real Name\n&amp;lt;:wolfe.freenode.net NOTICE * :*** Looking up your hostname...\n&amp;lt;:wolfe.freenode.net NOTICE * :*** Checking Ident\n&amp;lt;:wolfe.freenode.net NOTICE * :*** Found your hostname\n&amp;lt;:wolfe.freenode.net NOTICE * :*** No Ident response\n&amp;lt;:wolfe.freenode.net 001 Nickname :Welcome to the freenode Internet Relay Chat Network Nickname\n--- A bit later ---\n&amp;lt;:wolfe.freenode.net 376 MyRC_Bot :End of /MOTD command.\n&amp;gt;JOIN #reddit-dailyprogrammer,#rdp,#botters-test\n&amp;lt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #reddit-dailyprogrammer\n&amp;gt;PRIVMSG #reddit-dailyprogrammer :Hello World!\n&amp;lt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #rdp\n&amp;gt;PRIVMSG #rdp :Hello World!\n&amp;lt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #botters-test\n&amp;gt;PRIVMSG #botters-test :Hello World!\n--- Wait for chat ---\n&amp;lt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG #reddit-dailyprogrammer :GeekBot: sum 12 8 7 3 5\n&amp;gt;PRIVMSG #reddit-dailyprogrammer :GeekDude: The sum is 35\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, don&amp;#39;t forget to return any incoming &lt;code&gt;PING&lt;/code&gt; messages!&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;Your bot should handle commands sent to it directly as well as through normal channels. When you receive such a message,\nthe channel parameter of &lt;code&gt;PRIVMSG&lt;/code&gt; is set to your own nickname.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG GeekBot :GeekBot: mult 6 9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;You will have to recognize that the message has been sent directly to you, so you can send your own reply directly back.\nIf you tried to send to the same destination as the original message (as you would with a regular channel message),\nyou would end up sending the chat to yourself.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PRIVMSG GeekDude :GeekDude: 42\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;When communicating with the bot directly via private message, nickname prefixes for calling commands and for return\nvalues should be optional. For example, the following should work:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG GeekBot :GeekBot: div 1 9801\n&amp;gt;PRIVMSG GeekDude :GeekDude: 0.00010203...\n&amp;lt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG GeekBot :div 1 9801\n&amp;gt;PRIVMSG GeekDude :0.00010203...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;Be careful not to allow your bot to generate any newlines in response to a command. For example, if your bot did hex to\nascii conversion (&lt;code&gt;GeekBot: hex2ascii 0D0A&lt;/code&gt;) someone could potentially cause the bot to send a new protocol message, which\ncould do all sorts of nasty things. This includes sending the &lt;code&gt;QUIT&lt;/code&gt; message which would disconnect the bot, or making it\nspam people potentially getting it banned. If your bot is registered to an account, someone could use this technique to\ndelete the account, or reset the password.&lt;/p&gt;\n\n&lt;p&gt;To verify your code is joining channels and chatting correctly, I suggest joining the channel(s) in advance using an IRC client, such as the web based &lt;a href=\"http://webchat.freenode.net/\"&gt;http://webchat.freenode.net/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can see the full original IRC specification at &lt;a href=\"https://tools.ietf.org/html/rfc1459\"&gt;https://tools.ietf.org/html/rfc1459&lt;/a&gt;. See also, &lt;a href=\"http://ircdocs.horse/specs/\"&gt;http://ircdocs.horse/specs/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://mybuddymichael.com/writings/a-regular-expression-for-irc-messages.html\"&gt;A Regular Expression For IRC Messages&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I get the distinct feeling I&amp;#39;ve missed something, so if you see anything off let me know.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nIn the last challenge we initiated a connection to an IRC server. This time we are going to utilise that connection by\nresponding to user input. On an IRC server you can communicate with other users either directly, or in a group chatroom\nknown as a channel. Channel names are distinguished from users by a prefixed character (`#` on freenode) in the name.\n\nAfter connecting to an IRC server you will receive some informational text from the server known as the Message Of The Day,\nor MOTD. The server will buffer any messages (particularly attempts to join channels) sent before it has finished.\nThe end of the MOTD is marked by the message `RPL_ENDOFMOTD` which is defined as the number `376`. You don't necessarily\nhave to wait for the end of the MOTD before joining, but I've found it usually works better if you do.\n\n    :wolfe.freenode.net 376 GeekBot :End of /MOTD command.\n\nTo join a channel you must use the `JOIN` message. It takes a single parameter, which is a comma separated list of one or\nmore channels.\n\n    JOIN #reddit-dailyprogrammer,#botters-test\n\nOnce you have sent this message, you will receive one or more JOIN message(s) back from the server for every channel\nyou were successfully able to join. The message you receive back will be prefixed with yourself as the origin.\n\n    :GeekBot!G33kDude@192-168-1-42.isp.com JOIN #reddit-dailyprogrammer\n    :GeekBot!G33kDude@192-168-1-42.isp.com JOIN #botters-test\n\nAfter you've been joined to the channel, you can send text to the channel using the `PRIVMSG` message. It takes two\nparameters, the first being the the comma separated list of users or channels to send the text to, and the second being the\ncolon prefixed message text.\n\n    PRIVMSG #reddit-dailyprogrammer :Hello World!\n\nIn addition to being able to send messages, you can receive messages that have been sent to the channel by other users.\nYou should listen for a phrase prefixed with your name, then respond to that chat message. For example, you might see\nthe following chat message.\n\n    :GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG #ahkscript :GeekBot: random 20\n\nYour code would parse this message, and see the chatted contents were `GeekBot: random 20`. In response, your program might\ndo something like generate a random number, and chat it back.\n\n    PRIVMSG #ahkscript :GeekDude: 4 // chosen by fair 20 sided dice roll // guaranteed to be random\n\n# Input Description\n\nIn addition to the input from last time's challenge, there will also be two line specifying a channel to join, and a\nmessage to chat upon joining.\n\n    chat.freenode.net:6667\n    Nickname\n    Username\n    Real Name\n    #reddit-dailyprogrammer,#rdp,#botters-test\n    Hello World!\n\n# Output Description\n\nIn addition to the last challenge's output, you must also pick and respond to one or more chat commands. These commands\nmust take at least one parameter, and the return value should be chatted back to the same channel prefixed with the nick\nof the person who invoked the command.\n\nThe following code block has the prefix `&gt;` for outgoing messages, and `&lt;` for incoming messages.\n\n    &gt;NICK Nickname\n    &gt;USER Username 0 * :Real Name\n    &lt;:wolfe.freenode.net NOTICE * :*** Looking up your hostname...\n    &lt;:wolfe.freenode.net NOTICE * :*** Checking Ident\n    &lt;:wolfe.freenode.net NOTICE * :*** Found your hostname\n    &lt;:wolfe.freenode.net NOTICE * :*** No Ident response\n    &lt;:wolfe.freenode.net 001 Nickname :Welcome to the freenode Internet Relay Chat Network Nickname\n    --- A bit later ---\n    &lt;:wolfe.freenode.net 376 MyRC_Bot :End of /MOTD command.\n    &gt;JOIN #reddit-dailyprogrammer,#rdp,#botters-test\n    &lt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #reddit-dailyprogrammer\n    &gt;PRIVMSG #reddit-dailyprogrammer :Hello World!\n    &lt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #rdp\n    &gt;PRIVMSG #rdp :Hello World!\n    &lt;:GeekBot!G33kDude@192-168-1-42.isp.com JOIN #botters-test\n    &gt;PRIVMSG #botters-test :Hello World!\n    --- Wait for chat ---\n    &lt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG #reddit-dailyprogrammer :GeekBot: sum 12 8 7 3 5\n    &gt;PRIVMSG #reddit-dailyprogrammer :GeekDude: The sum is 35\n\nAlso, don't forget to return any incoming `PING` messages!\n\n# Challenge Input\n\nYour bot should handle commands sent to it directly as well as through normal channels. When you receive such a message,\nthe channel parameter of `PRIVMSG` is set to your own nickname.\n\n    :GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG GeekBot :GeekBot: mult 6 9\n\n# Challenge Output\n\nYou will have to recognize that the message has been sent directly to you, so you can send your own reply directly back.\nIf you tried to send to the same destination as the original message (as you would with a regular channel message),\nyou would end up sending the chat to yourself.\n\n    PRIVMSG GeekDude :GeekDude: 42\n\n# Bonus\n\nWhen communicating with the bot directly via private message, nickname prefixes for calling commands and for return\nvalues should be optional. For example, the following should work:\n\n    &lt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG GeekBot :GeekBot: div 1 9801\n    &gt;PRIVMSG GeekDude :GeekDude: 0.00010203...\n    &lt;:GeekDude!G33kDude@192-168-1-42.isp.com PRIVMSG GeekBot :div 1 9801\n    &gt;PRIVMSG GeekDude :0.00010203...\n\n# Notes\n\nBe careful not to allow your bot to generate any newlines in response to a command. For example, if your bot did hex to\nascii conversion (`GeekBot: hex2ascii 0D0A`) someone could potentially cause the bot to send a new protocol message, which\ncould do all sorts of nasty things. This includes sending the `QUIT` message which would disconnect the bot, or making it\nspam people potentially getting it banned. If your bot is registered to an account, someone could use this technique to\ndelete the account, or reset the password.\n\nTo verify your code is joining channels and chatting correctly, I suggest joining the channel(s) in advance using an IRC client, such as the web based http://webchat.freenode.net/.\n\nYou can see the full original IRC specification at https://tools.ietf.org/html/rfc1459. See also, http://ircdocs.horse/specs/.\n\n[A Regular Expression For IRC Messages](https://mybuddymichael.com/writings/a-regular-expression-for-irc-messages.html)\n\nI get the distinct feeling I've missed something, so if you see anything off let me know.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4anny5", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "G33kDude", "media": null, "score": 75, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 20, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1458448438.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4anny5/challenge_258_intermediate_irc_responding_to/", "locked": false, "name": "t3_4anny5", "created": 1458161745.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4anny5/challenge_258_intermediate_irc_responding_to/", "author_flair_text": "1 1", "quarantine": false, "title": "Challenge #258 [Intermediate] IRC: Responding to commands", "created_utc": 1458132945.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 75}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;A &lt;a href=\"https://en.wikipedia.org/wiki/Network_socket\"&gt;network socket&lt;/a&gt; is an endpoint of a connection across a computer network.\nToday, most communication between computers is based on the Internet Protocol; therefore most network sockets are Internet\nsockets. &lt;a href=\"https://simple.wikipedia.org/wiki/Internet_Relay_Chat\"&gt;Internet Relay Chat&lt;/a&gt; (IRC) is a chat system on the Internet.\nIt allows people from around the world to have conversations together, but it can also be used for two people to chat\nprivately.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Freenode\"&gt;Freenode&lt;/a&gt; is an IRC network used to discuss peer-directed projects. Their servers\nare all accessible from the domain names chat.freenode.net and irc.freenode.net. In 2010, it became the largest free and\nopen source software-focused IRC network.  In 2013 it became the largest IRC network, encompassing more than 90,000 users\nand 40,000 channels and gaining almost 5,000 new users per year. We have a channel on freenode ourselves for all things\n&lt;a href=\"/r/DailyProgrammer\"&gt;/r/DailyProgrammer&lt;/a&gt; on freenode, which is\n&lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/2dtqr7/psa_rdailyprogrammer_irc_channel/\"&gt;#reddit-dailyprogrammer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Your challenge today will be to communicate with the freenode IRC server. This will consist of opening a TCP socket to\nfreenode and sending two protocol messages to initiate the connection. The original\n&lt;a href=\"https://tools.ietf.org/html/rfc1459#section-4.1\"&gt;IRC RFC&lt;/a&gt; defines a message as a line of text up to 512 bytes starting \nwith a message code, followed by one or more space separated parameters, and ending with a CRLF (&lt;code&gt;\\r\\n&lt;/code&gt;). The last\nparamater can be prefixed by a colon to mark it as a parameter that can contain spaces, which will take up the rest of the\nline. An example of a colon-prefixed parameter would be the contents of a chat message, as that is something that contains spaces.&lt;/p&gt;\n\n&lt;p&gt;The first of the two initiation messages (&lt;code&gt;NICK&lt;/code&gt;) defines what name people will see when you send a chat message.\nIt will have to be unique, and you will not be able to connect if you specify a name which is currently in use or reserved.\nIt has a single parameter &lt;code&gt;&amp;lt;nickname&amp;gt;&lt;/code&gt; and will be sent in the following form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;NICK &amp;lt;nickname&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second of the two initiation messages (&lt;code&gt;USER&lt;/code&gt;) defines your username, user mode, server name, and real name. The username must also be unique and is usually set to be the same as the nickname. Originally, hostname was sent instead of user mode, but this was changed in a later version of the IRC protocol. For our purposes, standard mode &lt;code&gt;0&lt;/code&gt; will work fine. As for server name, this will be ignored by the server and is conventionally set as an asterisk (&lt;code&gt;*&lt;/code&gt;). The real name parameter can be whatever you want, though it is usually set to be the same value as the nickname. It does not have to be unique and may contain spaces. As such, it must be prefixed by a colon. The &lt;code&gt;USER&lt;/code&gt; message will be sent in the following form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USER &amp;lt;username&amp;gt; 0 * :&amp;lt;realname&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You will give your program a list of lines specifying server, port, nickname, username, and realname. The first line will contain the server and the port, separated by a colon. The second through fourth lines will contain nick information.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;chat.freenode.net:6667\nNickname\nUsername\nReal Name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program will open a socket to the specified server and port, and send the two required messages. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;NICK Nickname\nUSER Username 0 * :Real Name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Afterwards, it will begin to receive messages back from the server. Many messages sent from the server will be prefixed to indicate the origin of the message. This will be in the format &lt;code&gt;:server&lt;/code&gt; or &lt;code&gt;:nick[!user][@host]&lt;/code&gt;, followed by a space. The exact contents of these initial messages are usually not important, but you must output them in some manner. The first few messages received on a successful connection will look something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:wolfe.freenode.net NOTICE * :*** Looking up your hostname...\n:wolfe.freenode.net NOTICE * :*** Checking Ident\n:wolfe.freenode.net NOTICE * :*** Found your hostname\n:wolfe.freenode.net NOTICE * :*** No Ident response\n:wolfe.freenode.net 001 Nickname :Welcome to the freenode Internet Relay Chat Network Nickname\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;The server will occasionally send &lt;code&gt;PING&lt;/code&gt; messages to you. These have a single parameter beginning with a colon. The exact contents of that parameter will vary between servers, but is usually a unique string used to verify that your client is still connected and responsive. On freenode, it appears to be the name of the specific server you are connected to. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PING :wolfe.freenode.net\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;In response, you must send a &lt;code&gt;PONG&lt;/code&gt; message with the parameter being the same unique string from the &lt;code&gt;PING&lt;/code&gt;. You must continue to do this for the entire time your program is running, or it will get automatically disconnected from the server. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PONG :wolfe.freenode.net\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;You can see the full original IRC specification at &lt;a href=\"https://tools.ietf.org/html/rfc1459\"&gt;https://tools.ietf.org/html/rfc1459&lt;/a&gt;. Sections 2.3 and 4.1 are of particular note, as they describe the message format and the initial connection. See also, &lt;a href=\"http://ircdocs.horse/specs/\"&gt;http://ircdocs.horse/specs/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://mybuddymichael.com/writings/a-regular-expression-for-irc-messages.html\"&gt;A Regular Expression For IRC Messages&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Happy Pi Day!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nA [network socket](https://en.wikipedia.org/wiki/Network_socket) is an endpoint of a connection across a computer network.\nToday, most communication between computers is based on the Internet Protocol; therefore most network sockets are Internet\nsockets. [Internet Relay Chat](https://simple.wikipedia.org/wiki/Internet_Relay_Chat) (IRC) is a chat system on the Internet.\nIt allows people from around the world to have conversations together, but it can also be used for two people to chat\nprivately.\n\n[Freenode](https://en.wikipedia.org/wiki/Freenode) is an IRC network used to discuss peer-directed projects. Their servers\nare all accessible from the domain names chat.freenode.net and irc.freenode.net. In 2010, it became the largest free and\nopen source software-focused IRC network.  In 2013 it became the largest IRC network, encompassing more than 90,000 users\nand 40,000 channels and gaining almost 5,000 new users per year. We have a channel on freenode ourselves for all things\n/r/DailyProgrammer on freenode, which is\n[#reddit-dailyprogrammer](https://www.reddit.com/r/dailyprogrammer/comments/2dtqr7/psa_rdailyprogrammer_irc_channel/).\n\nYour challenge today will be to communicate with the freenode IRC server. This will consist of opening a TCP socket to\nfreenode and sending two protocol messages to initiate the connection. The original\n[IRC RFC](https://tools.ietf.org/html/rfc1459#section-4.1) defines a message as a line of text up to 512 bytes starting \nwith a message code, followed by one or more space separated parameters, and ending with a CRLF (`\\r\\n`). The last\nparamater can be prefixed by a colon to mark it as a parameter that can contain spaces, which will take up the rest of the\nline. An example of a colon-prefixed parameter would be the contents of a chat message, as that is something that contains spaces.\n\nThe first of the two initiation messages (`NICK`) defines what name people will see when you send a chat message.\nIt will have to be unique, and you will not be able to connect if you specify a name which is currently in use or reserved.\nIt has a single parameter `&lt;nickname&gt;` and will be sent in the following form:\n\n    NICK &lt;nickname&gt;\n\nThe second of the two initiation messages (`USER`) defines your username, user mode, server name, and real name. The username must also be unique and is usually set to be the same as the nickname. Originally, hostname was sent instead of user mode, but this was changed in a later version of the IRC protocol. For our purposes, standard mode `0` will work fine. As for server name, this will be ignored by the server and is conventionally set as an asterisk (`*`). The real name parameter can be whatever you want, though it is usually set to be the same value as the nickname. It does not have to be unique and may contain spaces. As such, it must be prefixed by a colon. The `USER` message will be sent in the following form:\n\n    USER &lt;username&gt; 0 * :&lt;realname&gt;\n\n# Input Description\n\nYou will give your program a list of lines specifying server, port, nickname, username, and realname. The first line will contain the server and the port, separated by a colon. The second through fourth lines will contain nick information.\n\n    chat.freenode.net:6667\n    Nickname\n    Username\n    Real Name\n\n# Output Description\n\nYour program will open a socket to the specified server and port, and send the two required messages. For example:\n\n    NICK Nickname\n    USER Username 0 * :Real Name\n\nAfterwards, it will begin to receive messages back from the server. Many messages sent from the server will be prefixed to indicate the origin of the message. This will be in the format `:server` or `:nick[!user][@host]`, followed by a space. The exact contents of these initial messages are usually not important, but you must output them in some manner. The first few messages received on a successful connection will look something like this:\n\n    :wolfe.freenode.net NOTICE * :*** Looking up your hostname...\n    :wolfe.freenode.net NOTICE * :*** Checking Ident\n    :wolfe.freenode.net NOTICE * :*** Found your hostname\n    :wolfe.freenode.net NOTICE * :*** No Ident response\n    :wolfe.freenode.net 001 Nickname :Welcome to the freenode Internet Relay Chat Network Nickname\n\n# Challenge Input\n\nThe server will occasionally send `PING` messages to you. These have a single parameter beginning with a colon. The exact contents of that parameter will vary between servers, but is usually a unique string used to verify that your client is still connected and responsive. On freenode, it appears to be the name of the specific server you are connected to. For example:\n\n    PING :wolfe.freenode.net\n\n# Challenge Output\n\nIn response, you must send a `PONG` message with the parameter being the same unique string from the `PING`. You must continue to do this for the entire time your program is running, or it will get automatically disconnected from the server. For example:\n\n    PONG :wolfe.freenode.net\n\n# Notes\n\nYou can see the full original IRC specification at https://tools.ietf.org/html/rfc1459. Sections 2.3 and 4.1 are of particular note, as they describe the message format and the initial connection. See also, http://ircdocs.horse/specs/.\n\n[A Regular Expression For IRC Messages](https://mybuddymichael.com/writings/a-regular-expression-for-irc-messages.html)\n\nHappy Pi Day!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4ad23z", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "G33kDude", "media": null, "score": 134, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 89, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1458448460.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/4ad23z/20160314_challenge_258_easy_irc_making_a/", "locked": false, "name": "t3_4ad23z", "created": 1457990575.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4ad23z/20160314_challenge_258_easy_irc_making_a/", "author_flair_text": "1 1", "quarantine": false, "title": "[2016-03-14] Challenge #258 [Easy] IRC: Making a Connection", "created_utc": 1457961775.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 134}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Back to word squares, a type of acrostic, a word puzzle. A word square is formed using a grid with letters arranged that spell valid English language words when you read from left to right or from top to bottom. The challenge is that in arranging the words that you spell valid words.&lt;/p&gt;\n\n&lt;p&gt;Today&amp;#39;s challenge is to input a set of dimensions (n*m) and work with the &lt;a href=\"https://github.com/dolph/dictionary/blob/master/enable1.txt\"&gt;enable1.txt&lt;/a&gt; dictionary file and produce a valid word square. &lt;/p&gt;\n\n&lt;p&gt;To clarify, the words you use in each column doesn&amp;#39;t have to be the same word in the corresponding row provided all words are valid English language words. You&amp;#39;re free to get creative. &lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given pair of integers telling you how many rows and columns to solve for. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit a valid word square with the letters placed to form valid English language words. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;rose\noven\nsend\nends\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;5 7\n6 6\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that even though we call it a word square it&amp;#39;s possibly a rectangle. Word squares just sounds so much better even if it&amp;#39;s less accurate.&lt;/p&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;Multiple valid ones may be produced, but here&amp;#39;s a few:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;glasses\nrelapse\nimitate\nsmeared\ntannery\n\ngarter\naverse\nrecite\ntribal\nestate\nreeled\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nBack to word squares, a type of acrostic, a word puzzle. A word square is formed using a grid with letters arranged that spell valid English language words when you read from left to right or from top to bottom. The challenge is that in arranging the words that you spell valid words.\n\nToday's challenge is to input a set of dimensions (n*m) and work with the [enable1.txt](https://github.com/dolph/dictionary/blob/master/enable1.txt) dictionary file and produce a valid word square. \n\nTo clarify, the words you use in each column doesn't have to be the same word in the corresponding row provided all words are valid English language words. You're free to get creative. \n\n# Input Description\n\nYou'll be given pair of integers telling you how many rows and columns to solve for. Example:\n\n    4 4\n\n# Output Description\n\nYour program should emit a valid word square with the letters placed to form valid English language words. Example:\n\n    rose\n    oven\n    send\n    ends\n\n# Challenge Input\n\n    5 7\n    6 6\n\nNote that even though we call it a word square it's possibly a rectangle. Word squares just sounds so much better even if it's less accurate.\n\n# Challenge Output\n\nMultiple valid ones may be produced, but here's a few:\n\n    glasses\n    relapse\n    imitate\n    smeared\n    tannery\n\n    garter\n    averse\n    recite\n    tribal\n    estate\n    reeled", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "49yv3p", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 58, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 19, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1457712711.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/49yv3p/20160311_challenge_257_hard_word_squares_part_2/", "locked": false, "name": "t3_49yv3p", "created": 1457733051.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/49yv3p/20160311_challenge_257_hard_word_squares_part_2/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-03-11] Challenge #257 [Hard] Word Squares Part 2", "created_utc": 1457704251.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 58}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;A word square is a type of acrostic, a word puzzle. In a word square you are given a grid with letters arranged that spell valid English language words when you read from left to right or from top to bottom, with the requirement that the words you spell in each column and row of the same number are the same word. For example, the first row and the first column spell the same word, the second row and second column do, too, and so on. The challenge is that in arranging those letters that you spell valid words that meet those requirements.&lt;/p&gt;\n\n&lt;p&gt;One variant is where you&amp;#39;re given an n*n grid and asked to place a set of letters inside to meet these rules. That&amp;#39;s today&amp;#39;s challenge: given the grid dimensions and a list of letters, can you produce a valid word square.&lt;/p&gt;\n\n&lt;p&gt;Via &lt;a href=\"/u/Godspiral\"&gt;/u/Godspiral&lt;/a&gt;: &lt;a href=\"http://norvig.com/ngrams/enable1.txt\"&gt;http://norvig.com/ngrams/enable1.txt&lt;/a&gt; (an English-language dictionary you may wish to use)&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given an integer telling you how many rows and columns (it&amp;#39;s a square) to use and then n&lt;sup&gt;2&lt;/sup&gt; letters to populate the grid with. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 eeeeddoonnnsssrv\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit a valid word square with the letters placed to form valid English language words. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;rose\noven\nsend\nends\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;4 aaccdeeeemmnnnoo\n5 aaaeeeefhhmoonssrrrrttttw\n5 aabbeeeeeeeehmosrrrruttvv\n7 aaaaaaaaabbeeeeeeedddddggmmlloooonnssssrrrruvvyyy\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;moan\nonce\nacme\nneed\n\nfeast\nearth\narmor\nstone\nthrew\n\nheart\nember\nabove\nrevue\ntrees\n\nbravado\nrenamed\nanalogy\nvaluers\namoebas\ndegrade\nodyssey\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nA word square is a type of acrostic, a word puzzle. In a word square you are given a grid with letters arranged that spell valid English language words when you read from left to right or from top to bottom, with the requirement that the words you spell in each column and row of the same number are the same word. For example, the first row and the first column spell the same word, the second row and second column do, too, and so on. The challenge is that in arranging those letters that you spell valid words that meet those requirements.\n\nOne variant is where you're given an n*n grid and asked to place a set of letters inside to meet these rules. That's today's challenge: given the grid dimensions and a list of letters, can you produce a valid word square.\n\nVia /u/Godspiral: http://norvig.com/ngrams/enable1.txt (an English-language dictionary you may wish to use)\n\n# Input Description\n\nYou'll be given an integer telling you how many rows and columns (it's a square) to use and then n^2 letters to populate the grid with. Example:\n\n    4 eeeeddoonnnsssrv\n\n# Output Description\n\nYour program should emit a valid word square with the letters placed to form valid English language words. Example:\n\n    rose\n    oven\n    send\n    ends\n\n# Challenge Input\n\n    4 aaccdeeeemmnnnoo\n    5 aaaeeeefhhmoonssrrrrttttw\n    5 aabbeeeeeeeehmosrrrruttvv\n    7 aaaaaaaaabbeeeeeeedddddggmmlloooonnssssrrrruvvyyy\n\n# Challenge Output\n\n    moan\n    once\n    acme\n    need\n\n    feast\n    earth\n    armor\n    stone\n    threw\n\n    heart\n    ember\n    above\n    revue\n    trees\n\n    bravado\n    renamed\n    analogy\n    valuers\n    amoebas\n    degrade\n    odyssey\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "49o3ho", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 72, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 30, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1457537308.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/49o3ho/20160309_challenge_257_intermediate_word_squares/", "locked": false, "name": "t3_49o3ho", "created": 1457559783.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/49o3ho/20160309_challenge_257_intermediate_word_squares/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-03-09] Challenge #257 [Intermediate] Word Squares Part 1", "created_utc": 1457530983.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 72}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;US presidents serve four year terms, with most presidents serving one or two terms. Unless a president dies in office, they then live after leaving office. &lt;/p&gt;\n\n&lt;p&gt;This challenge, then, given a list of presidents and their dates of birth and dates of death, is to figure out what &lt;em&gt;year&lt;/em&gt; the most presidents - future, present, or previous - were alive. &lt;/p&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;Below is a CSV input of presidential birthdates and death dates. Find what year in which the most number of people who would serve, are serving, or have served as presidents. The answer might be multiple years, or only a partial year. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PRESIDENT,  BIRTH DATE, BIRTH PLACE,    DEATH DATE, LOCATION OF DEATH\nGeorge Washington,  Feb 22 1732,    Westmoreland Co. Va.,   Dec 14 1799,    Mount Vernon Va.\nJohn Adams, Oct 30 1735,    Quincy Mass.,   July 4 1826,    Quincy Mass.\nThomas Jefferson,   Apr 13 1743,    Albemarle Co. Va.,  July 4 1826,    Albemarle Co. Va.\nJames Madison,  Mar 16 1751,    Port Conway Va.,    June 28 1836,   Orange Co. Va.\nJames Monroe,   Apr 28 1758,    Westmoreland Co. Va.,   July 4 1831,    New York New York\nJohn Quincy Adams,  July 11 1767,   Quincy Mass.,   Feb 23 1848,    Washington D.C.\nAndrew Jackson, Mar 15 1767,    Lancaster Co. S.C., June 8 1845,    Nashville Tennessee\nMartin Van Buren,   Dec 5 1782, Kinderhook New York,    July 24 1862,   Kinderhook New York\nWilliam Henry Harrison, Feb 9 1773, Charles City Co. Va.,   Apr 4 1841, Washington D.C.\nJohn Tyler, Mar 29 1790,    Charles City Co. Va.,   Jan 18 1862,    Richmond Va.\nJames K. Polk,  Nov 2 1795, Mecklenburg Co. N.C.,   June 15 1849,   Nashville Tennessee\nZachary Taylor, Nov 24 1784,    Orange County Va.,  July 9 1850,    Washington D.C\nMillard Fillmore,   Jan 7 1800, Cayuga Co. New York,    Mar 8 1874, Buffalo New York\nFranklin Pierce,    Nov 23 1804,    Hillsborough N.H.,  Oct 8 1869, Concord New Hamp.\nJames Buchanan, Apr 23 1791,    Cove Gap Pa.,   June 1 1868,    Lancaster Pa.\nAbraham Lincoln,    Feb 12 1809,    LaRue Co. Kentucky, Apr 15 1865,    Washington D.C.\nAndrew Johnson, Dec 29 1808,    Raleigh North Carolina, July 31 1875,   Elizabethton Tenn.\nUlysses S. Grant,   Apr 27 1822,    Point Pleasant Ohio,    July 23 1885,   Wilton New York\nRutherford B. Hayes,    Oct 4 1822, Delaware Ohio,  Jan 17 1893,    Fremont Ohio\nJames A. Garfield,  Nov 19 1831,    Cuyahoga Co. Ohio,  Sep 19 1881,    Elberon New Jersey\nChester Arthur, Oct 5 1829, Fairfield Vermont,  Nov 18 1886,    New York New York\nGrover Cleveland,   Mar 18 1837,    Caldwell New Jersey,    June 24 1908,   Princeton New Jersey\nBenjamin Harrison,  Aug 20 1833,    North Bend Ohio,    Mar 13 1901,    Indianapolis Indiana\nWilliam McKinley,   Jan 29 1843,    Niles Ohio, Sep 14 1901,    Buffalo New York\nTheodore Roosevelt, Oct 27 1858,    New York New York,  Jan 6 1919, Oyster Bay New York\nWilliam Howard Taft,    Sep 15 1857,    Cincinnati Ohio,    Mar 8 1930, Washington D.C.\nWoodrow Wilson, Dec 28 1856,    Staunton Virginia,  Feb 3 1924, Washington D.C.\nWarren G. Harding,  Nov 2 1865, Morrow County Ohio, Aug 2 1923, San Francisco Cal.\nCalvin Coolidge,    July 4 1872,    Plymouth Vermont,   Jan 5 1933, Northampton Mass.\nHerbert Hoover, Aug 10 1874,    West Branch Iowa,   Oct 20 1964,    New York New York\nFranklin Roosevelt, Jan 30 1882,    Hyde Park New York, Apr 12 1945,    Warm Springs Georgia\nHarry S. Truman,    May 8 1884, Lamar Missouri, Dec 26 1972,    Kansas City Missouri\nDwight Eisenhower,  Oct 14 1890,    Denison Texas,  Mar 28 1969,    Washington D.C.\nJohn F. Kennedy,    May 29 1917,    Brookline Mass.,    Nov 22 1963,    Dallas Texas\nLyndon B. Johnson,  Aug 27 1908,    Gillespie Co. Texas,    Jan 22 1973,    Gillespie Co. Texas\nRichard Nixon,  Jan 9 1913, Yorba Linda Cal.,   Apr 22 1994,    New York New York\nGerald Ford,    July 14 1913,   Omaha Nebraska, Dec 26 2006,    Rancho Mirage Cal.\nJimmy Carter,   Oct 1 1924, Plains Georgia, ,   \nRonald Reagan,  Feb 6 1911, Tampico Illinois,   June 5 2004,    Los Angeles Cal.\nGeorge Bush,    June 12 1924,   Milton Mass.,   ,   \nBill Clinton,   Aug 19 1946,    Hope Arkansas,  ,   \nGeorge W. Bush, July 6 1946,    New Haven Conn.,    ,   \nBarack Obama,   Aug 4 1961, Honolulu Hawaii,    ,\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;via &lt;a href=\"http://www.presidentsusa.net/birth.html\"&gt;U.S. Presidents Birth and Death Information&lt;/a&gt;. &lt;/p&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;p&gt;Any of the following years is valid: 1822, 1823, 1824, 1825, 1826, 1831, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845 (each year had 18 presidents, current, former, or to be, alive). &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nUS presidents serve four year terms, with most presidents serving one or two terms. Unless a president dies in office, they then live after leaving office. \n\nThis challenge, then, given a list of presidents and their dates of birth and dates of death, is to figure out what *year* the most presidents - future, present, or previous - were alive. \n\n# Challenge Input\n\nBelow is a CSV input of presidential birthdates and death dates. Find what year in which the most number of people who would serve, are serving, or have served as presidents. The answer might be multiple years, or only a partial year. \n\n    PRESIDENT,\tBIRTH DATE,\tBIRTH PLACE,\tDEATH DATE,\tLOCATION OF DEATH\n    George Washington,\tFeb 22 1732,\tWestmoreland Co. Va.,\tDec 14 1799,\tMount Vernon Va.\n    John Adams,\tOct 30 1735,\tQuincy Mass.,\tJuly 4 1826,\tQuincy Mass.\n    Thomas Jefferson,\tApr 13 1743,\tAlbemarle Co. Va.,\tJuly 4 1826,\tAlbemarle Co. Va.\n    James Madison,\tMar 16 1751,\tPort Conway Va.,\tJune 28 1836,\tOrange Co. Va.\n    James Monroe,\tApr 28 1758,\tWestmoreland Co. Va.,\tJuly 4 1831,\tNew York New York\n    John Quincy Adams,\tJuly 11 1767,\tQuincy Mass.,\tFeb 23 1848,\tWashington D.C.\n    Andrew Jackson,\tMar 15 1767,\tLancaster Co. S.C.,\tJune 8 1845,\tNashville Tennessee\n    Martin Van Buren,\tDec 5 1782,\tKinderhook New York,\tJuly 24 1862,\tKinderhook New York\n    William Henry Harrison,\tFeb 9 1773,\tCharles City Co. Va.,\tApr 4 1841,\tWashington D.C.\n    John Tyler,\tMar 29 1790,\tCharles City Co. Va.,\tJan 18 1862,\tRichmond Va.\n    James K. Polk,\tNov 2 1795,\tMecklenburg Co. N.C.,\tJune 15 1849,\tNashville Tennessee\n    Zachary Taylor,\tNov 24 1784,\tOrange County Va.,\tJuly 9 1850,\tWashington D.C\n    Millard Fillmore,\tJan 7 1800,\tCayuga Co. New York,\tMar 8 1874,\tBuffalo New York\n    Franklin Pierce,\tNov 23 1804,\tHillsborough N.H.,\tOct 8 1869,\tConcord New Hamp.\n    James Buchanan,\tApr 23 1791,\tCove Gap Pa.,\tJune 1 1868,\tLancaster Pa.\n    Abraham Lincoln,\tFeb 12 1809,\tLaRue Co. Kentucky,\tApr 15 1865,\tWashington D.C.\n    Andrew Johnson,\tDec 29 1808,\tRaleigh North Carolina,\tJuly 31 1875,\tElizabethton Tenn.\n    Ulysses S. Grant,\tApr 27 1822,\tPoint Pleasant Ohio,\tJuly 23 1885,\tWilton New York\n    Rutherford B. Hayes,\tOct 4 1822,\tDelaware Ohio,\tJan 17 1893,\tFremont Ohio\n    James A. Garfield,\tNov 19 1831,\tCuyahoga Co. Ohio,\tSep 19 1881,\tElberon New Jersey\n    Chester Arthur,\tOct 5 1829,\tFairfield Vermont,\tNov 18 1886,\tNew York New York\n    Grover Cleveland,\tMar 18 1837,\tCaldwell New Jersey,\tJune 24 1908,\tPrinceton New Jersey\n    Benjamin Harrison,\tAug 20 1833,\tNorth Bend Ohio,\tMar 13 1901,\tIndianapolis Indiana\n    William McKinley,\tJan 29 1843,\tNiles Ohio,\tSep 14 1901,\tBuffalo New York\n    Theodore Roosevelt,\tOct 27 1858,\tNew York New York,\tJan 6 1919,\tOyster Bay New York\n    William Howard Taft,\tSep 15 1857,\tCincinnati Ohio,\tMar 8 1930,\tWashington D.C.\n    Woodrow Wilson,\tDec 28 1856,\tStaunton Virginia,\tFeb 3 1924,\tWashington D.C.\n    Warren G. Harding,\tNov 2 1865,\tMorrow County Ohio,\tAug 2 1923,\tSan Francisco Cal.\n    Calvin Coolidge,\tJuly 4 1872,\tPlymouth Vermont,\tJan 5 1933,\tNorthampton Mass.\n    Herbert Hoover,\tAug 10 1874,\tWest Branch Iowa,\tOct 20 1964,\tNew York New York\n    Franklin Roosevelt,\tJan 30 1882,\tHyde Park New York,\tApr 12 1945,\tWarm Springs Georgia\n    Harry S. Truman,\tMay 8 1884,\tLamar Missouri,\tDec 26 1972,\tKansas City Missouri\n    Dwight Eisenhower,\tOct 14 1890,\tDenison Texas,\tMar 28 1969,\tWashington D.C.\n    John F. Kennedy,\tMay 29 1917,\tBrookline Mass.,\tNov 22 1963,\tDallas Texas\n    Lyndon B. Johnson,\tAug 27 1908,\tGillespie Co. Texas,\tJan 22 1973,\tGillespie Co. Texas\n    Richard Nixon,\tJan 9 1913,\tYorba Linda Cal.,\tApr 22 1994,\tNew York New York\n    Gerald Ford,\tJuly 14 1913,\tOmaha Nebraska,\tDec 26 2006,\tRancho Mirage Cal.\n    Jimmy Carter,\tOct 1 1924,\tPlains Georgia,\t,\t\n    Ronald Reagan,\tFeb 6 1911,\tTampico Illinois,\tJune 5 2004,\tLos Angeles Cal.\n    George Bush,\tJune 12 1924,\tMilton Mass.,\t,\t\n    Bill Clinton,\tAug 19 1946,\tHope Arkansas,\t,\t\n    George W. Bush,\tJuly 6 1946,\tNew Haven Conn.,\t,\t\n    Barack Obama,\tAug 4 1961,\tHonolulu Hawaii,\t,\n\nvia [U.S. Presidents Birth and Death Information](http://www.presidentsusa.net/birth.html). \n\n# Challenge Output\n\nAny of the following years is valid: 1822, 1823, 1824, 1825, 1826, 1831, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845 (each year had 18 presidents, current, former, or to be, alive). \n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "49aatn", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 125, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 112, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/49aatn/20160307_challenge_257_easy_in_what_year_were/", "locked": false, "name": "t3_49aatn", "created": 1457344035.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/49aatn/20160307_challenge_257_easy_in_what_year_were/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-03-07] Challenge #257 [Easy] In what year were most presidents alive?", "created_utc": 1457315235.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 125}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;run length encoding is a simple and magical data compression technique that I would like to use as a database.  But we will just be experimenting with querying and updating ranges of rle data without &amp;quot;decompressing&amp;quot; the rle data.&lt;/p&gt;\n\n&lt;h1&gt;1. eazy: run length indexes&lt;/h1&gt;\n\n&lt;p&gt;run length indexes (RLI) is an array representation of binary data (list of booleans) as a list of indexes (numbers that are not booleans).&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;the last element is the size of the boolean list&lt;/li&gt;\n&lt;li&gt;the first element is the boolean data index of the first 1 &lt;/li&gt;\n&lt;li&gt;every other element is an index where the data changes from 0 or 1 to its opposite.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;An rli list of &lt;code&gt;1000&lt;/code&gt; represents 1000 0s.&lt;br/&gt;\nAn rli list of &lt;code&gt;0 1000&lt;/code&gt; represents 1000 1s.&lt;br/&gt;\nAn rli list of &lt;code&gt;2 3 7 10&lt;/code&gt; represents &lt;code&gt;0 0 1 0 0 0 0 1 1 1&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;RLI is more of an in memory representation rather than a storage format, but can be computed efficiently from this &lt;strong&gt;packed RLE format&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;first element is number of leading consecutive &lt;code&gt;0s&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;next element is number of following &lt;code&gt;1s&lt;/code&gt; minus 1 (there has to be at least one)&lt;/li&gt;\n&lt;li&gt;next element is number of following &lt;code&gt;0s&lt;/code&gt; minus 1 (there has to be at least one)&lt;/li&gt;\n&lt;li&gt;repeat step 2.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;challenge&lt;/strong&gt;&lt;br/&gt;\ncreate an RLI function, and optionally a packed RLE function&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;  (one per line)&lt;br/&gt;\n0 0 1 0 0 0 0 1 1 1&lt;br/&gt;\n0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1&lt;br/&gt;\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;alternate input: bitsize, number&lt;/strong&gt;&lt;br/&gt;\n10 135&lt;br/&gt;\n32 12311231&lt;br/&gt;\n32 2147483713&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Packed RLE output&lt;/strong&gt;&lt;br/&gt;\n2 0 3 2&lt;br/&gt;\n8 0 0 2 0 3 0 1 0 0 0 0 0 5&lt;br/&gt;\n0 0 23 0 4 0&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;RLI output&lt;/strong&gt;&lt;br/&gt;\n2 3 7 10&lt;br/&gt;\n8 9 10 13 14 18 19 21 22 23 24 25 26 32&lt;br/&gt;\n0 1 25 26 31 32&lt;/p&gt;\n\n&lt;h1&gt;2. [Med] range query on RLI data&lt;/h1&gt;\n\n&lt;p&gt;for 32bit binary 2147483713 the (0 based) indexes from 23 to 30 are: &lt;code&gt;0 0 1 0 0 0 0 0&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Can you query the RLI data directly to obtain binary substrings?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt; format is:  start_index, length, RLI data&lt;br/&gt;\n0 9 2 3 7 10&lt;br/&gt;\n5 14 8 9 10 13 14 18 19 21 22 23 24 25 26 32&lt;br/&gt;\n23 4 0 1 25 26 31 32&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br/&gt;\n2 3 7 9&lt;br/&gt;\n3 4 5 8 9 13 14&lt;br/&gt;\n2 3 4&lt;/p&gt;\n\n&lt;h1&gt;3. [Hard] overwrite RLI data with RLI data at an offset&lt;/h1&gt;\n\n&lt;p&gt;to overwrite the string &lt;code&gt;1 1 1&lt;/code&gt; starting at index &lt;code&gt;3&lt;/code&gt; overinto &lt;code&gt;0 0 1 0 0 0 0 1 1 1&lt;/code&gt; results in the output string &lt;code&gt;0 0 1 1 1 1 0 1 1 1&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The same problem with RLI data is to overwrite the RLI string &lt;code&gt;0 3&lt;/code&gt; starting at index &lt;code&gt;3&lt;/code&gt; overinto &lt;code&gt;2 3 7 10&lt;/code&gt; results in &lt;code&gt;2 6 7 10&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt; format: start_index, RLI_newdata &amp;gt; RLI_intodata&lt;br/&gt;\n3 0 3 &amp;gt; 2 3 7 10&lt;br/&gt;\n3 1 3 &amp;gt; 2 3 7 10&lt;br/&gt;\n3 1 3 &amp;gt; 10&lt;br/&gt;\n3 1 3 &amp;gt; 0 10&lt;br/&gt;\n3 0 3 7 10 12 15 &amp;gt; 8 9 10 13 14 18 19 21 22 23 24 25 26 32&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br/&gt;\n2 6 7 10&lt;br/&gt;\n2 3 4 6 7 10&lt;br/&gt;\n4 6 10&lt;br/&gt;\n0 3 4 10&lt;br/&gt;\n3 6 10 13 15 18 19 21 22 23 24 25 26 32&lt;/p&gt;\n\n&lt;h1&gt;Note: CHEATING!!!!&lt;/h1&gt;\n\n&lt;p&gt;For Medium and Hard part, it is cheating to convert RLI to bitstrings, query/overwrite and then convert back to RLI.  These functions are meant to be run on sparse bitstrings, trillions of bits long, but with short RLI sequences.&lt;/p&gt;\n\n&lt;h1&gt;bonus&lt;/h1&gt;\n\n&lt;p&gt;these functions can be used to solve the &amp;quot;Playing with light switches&amp;quot; recent challenge here: &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/46zm8m/20160222_challenge_255_easy_playing_with_light/\"&gt;https://www.reddit.com/r/dailyprogrammer/comments/46zm8m/20160222_challenge_255_easy_playing_with_light/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;though there is also a shortcut to negate a range of bit values in RLI format (hint: add or remove a single index)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "run length encoding is a simple and magical data compression technique that I would like to use as a database.  But we will just be experimenting with querying and updating ranges of rle data without \"decompressing\" the rle data.\n\n# 1. eazy: run length indexes\nrun length indexes (RLI) is an array representation of binary data (list of booleans) as a list of indexes (numbers that are not booleans).\n\n2. the last element is the size of the boolean list\n1. the first element is the boolean data index of the first 1 \n3. every other element is an index where the data changes from 0 or 1 to its opposite.\n\nAn rli list of `1000` represents 1000 0s.  \nAn rli list of `0 1000` represents 1000 1s.  \nAn rli list of `2 3 7 10` represents `0 0 1 0 0 0 0 1 1 1`. \n\nRLI is more of an in memory representation rather than a storage format, but can be computed efficiently from this **packed RLE format**\n\n1. first element is number of leading consecutive `0s`\n2. next element is number of following `1s` minus 1 (there has to be at least one)\n3. next element is number of following `0s` minus 1 (there has to be at least one)\n4. repeat step 2.\n\n**challenge**   \ncreate an RLI function, and optionally a packed RLE function\n\n**input**  (one per line)  \n0 0 1 0 0 0 0 1 1 1  \n0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1   \n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1\n\n**alternate input: bitsize, number**  \n10 135  \n32 12311231  \n32 2147483713\n\n**Packed RLE output**  \n2 0 3 2  \n8 0 0 2 0 3 0 1 0 0 0 0 0 5  \n0 0 23 0 4 0\n\n**RLI output**  \n2 3 7 10  \n8 9 10 13 14 18 19 21 22 23 24 25 26 32  \n0 1 25 26 31 32\n\n# 2. [Med] range query on RLI data\n\nfor 32bit binary 2147483713 the (0 based) indexes from 23 to 30 are: `0 0 1 0 0 0 0 0`\n\nCan you query the RLI data directly to obtain binary substrings?\n\n**input** format is:  start_index, length, RLI data  \n0 9 2 3 7 10  \n5 14 8 9 10 13 14 18 19 21 22 23 24 25 26 32  \n23 4 0 1 25 26 31 32\n\n**output**  \n2 3 7 9   \n3 4 5 8 9 13 14  \n2 3 4\n\n# 3. [Hard] overwrite RLI data with RLI data at an offset\n\nto overwrite the string `1 1 1` starting at index `3` overinto `0 0 1 0 0 0 0 1 1 1` results in the output string `0 0 1 1 1 1 0 1 1 1`\n\nThe same problem with RLI data is to overwrite the RLI string `0 3` starting at index `3` overinto `2 3 7 10` results in `2 6 7 10`\n\n**input** format: start_index, RLI_newdata &gt; RLI_intodata  \n3 0 3 &gt; 2 3 7 10  \n3 1 3 &gt; 2 3 7 10  \n3 1 3 &gt; 10  \n3 1 3 &gt; 0 10  \n3 0 3 7 10 12 15 &gt; 8 9 10 13 14 18 19 21 22 23 24 25 26 32\n\n**output**  \n2 6 7 10  \n2 3 4 6 7 10  \n4 6 10  \n0 3 4 10  \n3 6 10 13 15 18 19 21 22 23 24 25 26 32\n\n# Note: CHEATING!!!!\nFor Medium and Hard part, it is cheating to convert RLI to bitstrings, query/overwrite and then convert back to RLI.  These functions are meant to be run on sparse bitstrings, trillions of bits long, but with short RLI sequences.\n\n# bonus\nthese functions can be used to solve the \"Playing with light switches\" recent challenge here: https://www.reddit.com/r/dailyprogrammer/comments/46zm8m/20160222_challenge_255_easy_playing_with_light/\n\nthough there is also a shortcut to negate a range of bit values in RLI format (hint: add or remove a single index)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "48w88o", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "score": 59, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 34, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1457093193.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/48w88o/20160304_challenge_256_hard_rle_obsession/", "locked": false, "name": "t3_48w88o", "created": 1457101682.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/48w88o/20160304_challenge_256_hard_rle_obsession/", "author_flair_text": "3 2", "quarantine": false, "title": "[2016-03-04] Challenge #256 [Hard] RLE Obsession", "created_utc": 1457072882.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 59}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You are the game master of the game &amp;quot;Guess my hat color&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;The game goes as following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You put a group of &lt;code&gt;n&lt;/code&gt; people in one row, each facing the same direction&lt;/li&gt;\n&lt;li&gt;You assign a collored hat to each person of the group&lt;/li&gt;\n&lt;li&gt;Now you let each person guess the color of their own hat, starting with the last person in the row.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;There are only 2 colors of hats and each person can only see the color of hats in front of them.\nThe group wins from the gamemaster if they can win by making only 1 mistake.&lt;/p&gt;\n\n&lt;p&gt;The challenge today is to write the logic to make the guess.&lt;/p&gt;\n\n&lt;p&gt;The person guessing can only see the persons in front of them (and their hats) and can hear the guesses from the persons behind them. \nThey can &lt;strong&gt;NEVER&lt;/strong&gt; look behind them or look at their own hat.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;You get the list of hat colors starting with the person in the back and going to the front&lt;/p&gt;\n\n&lt;h3&gt;Input 1 - 10 hats&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;Black\nWhite\nBlack\nBlack\nWhite\nWhite\nBlack\nWhite\nWhite\nWhite\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 2 - 11 hats&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;Black\nBlack\nWhite\nWhite\nBlack\nBlack\nWhite\nBlack\nWhite\nWhite\nWhite\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 3 - 10 hats&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;Black\nBlack\nBlack\nBlack\nBlack\nBlack\nBlack\nBlack\nBlack\nWhite\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;You have to show the guesses of the persons and whether they passed the challenge (they should if your logic is correct).&lt;/p&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;Obviously if you return at random &lt;code&gt;Black&lt;/code&gt; or &lt;code&gt;White&lt;/code&gt; this won&amp;#39;t work. The person units will have to work togheter to get a result with maximum 1 mistake.&lt;/p&gt;\n\n&lt;p&gt;There is no fixed ratio, neither do the participants know what the ratio is.&lt;/p&gt;\n\n&lt;h1&gt;An example for the layout&lt;/h1&gt;\n\n&lt;p&gt;You have 4 people with lined up like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Black -&amp;gt; White -&amp;gt; White -&amp;gt; Black\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The one in the back can see:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;White -&amp;gt; White -&amp;gt; Black\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second one sees:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;White -&amp;gt; Black\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And so on...&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/fvandepitte/8ab2e2ab0e42e3d4c731\"&gt;Here you have a large set (10000 hats)&lt;/a&gt;. \nMake sure your program can handle this.&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Added notes&lt;/p&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/355over113\"&gt;/u/355over113&lt;/a&gt; for pointing out a typo&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nYou are the game master of the game \"Guess my hat color\".\n\nThe game goes as following:\n\n- You put a group of `n` people in one row, each facing the same direction\n- You assign a collored hat to each person of the group\n- Now you let each person guess the color of their own hat, starting with the last person in the row.\n\nThere are only 2 colors of hats and each person can only see the color of hats in front of them.\nThe group wins from the gamemaster if they can win by making only 1 mistake.\n\nThe challenge today is to write the logic to make the guess.\n\nThe person guessing can only see the persons in front of them (and their hats) and can hear the guesses from the persons behind them. \nThey can **NEVER** look behind them or look at their own hat.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nYou get the list of hat colors starting with the person in the back and going to the front\n\n###Input 1 - 10 hats\n\n    Black\n    White\n    Black\n    Black\n    White\n    White\n    Black\n    White\n    White\n    White\n\n###Input 2 - 11 hats\n\n    Black\n    Black\n    White\n    White\n    Black\n    Black\n    White\n    Black\n    White\n    White\n    White\n\n###Input 3 - 10 hats\n\n    Black\n    Black\n    Black\n    Black\n    Black\n    Black\n    Black\n    Black\n    Black\n    White\n\n##Output description\n\nYou have to show the guesses of the persons and whether they passed the challenge (they should if your logic is correct).\n\n#Notes/Hints\n\nObviously if you return at random `Black` or `White` this won't work. The person units will have to work togheter to get a result with maximum 1 mistake.\n\nThere is no fixed ratio, neither do the participants know what the ratio is.\n\n#An example for the layout\n\nYou have 4 people with lined up like this:\n\n    Black -&gt; White -&gt; White -&gt; Black\n\nThe one in the back can see:\n\n    White -&gt; White -&gt; Black\n\nThe second one sees:\n\n    White -&gt; Black\n\nAnd so on...\n\n#Bonus\n\n[Here you have a large set (10000 hats)](https://gist.github.com/fvandepitte/8ab2e2ab0e42e3d4c731). \nMake sure your program can handle this.\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\n**EDIT** Added notes\n\nThanks to /u/355over113 for pointing out a typo", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "48l3u9", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "score": 53, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 81, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1456928112.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/48l3u9/20160302_challenge_256_intermediate_guess_my_hat/", "locked": false, "name": "t3_48l3u9", "created": 1456931946.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/48l3u9/20160302_challenge_256_intermediate_guess_my_hat/", "author_flair_text": null, "quarantine": false, "title": "[2016-03-02] Challenge #256 [Intermediate] Guess my hat color", "created_utc": 1456903146.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 53}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=\"/r/dailyprogrammer\"&gt;/r/dailyprogrammer&lt;/a&gt; metrics:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Total Subscribers: 80,064&lt;/p&gt;\n\n&lt;p&gt;Subreddit Rank: 570&lt;/p&gt;\n\n&lt;p&gt;Subreddit Growth &amp;amp; Milestones: &lt;a href=\"http://redditmetrics.com/r/dailyprogrammer\"&gt;http://redditmetrics.com/r/dailyprogrammer&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "**/r/dailyprogrammer metrics:**\n\nTotal Subscribers: 80,064\n\nSubreddit Rank: 570\n\nSubreddit Growth &amp; Milestones: http://redditmetrics.com/r/dailyprogrammer", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "48atlc", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "TrendingBot", "media": null, "score": 216, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 9, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/48atlc/rdailyprogrammer_hits_80k_subscribers/", "locked": false, "name": "t3_48atlc", "created": 1456789868.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/48atlc/rdailyprogrammer_hits_80k_subscribers/", "author_flair_text": null, "quarantine": false, "title": "/r/dailyprogrammer hits 80K subscribers", "created_utc": 1456761068.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 216}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The oblique function slices a matrix (2d array) into diagonals.&lt;/p&gt;\n\n&lt;p&gt;The de-oblique function takes diagonals of a matrix, and reassembles the original rectangular one.&lt;/p&gt;\n\n&lt;h1&gt;input for oblique&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt; 0  1  2  3  4  5\n 6  7  8  9 10 11\n12 13 14 15 16 17\n18 19 20 21 22 23\n24 25 26 27 28 29\n30 31 32 33 34 35\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(and the output to de-oblique)&lt;/p&gt;\n\n&lt;h1&gt;output for oblique&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;0               \n1 6             \n2 7 12          \n3 8 13 18       \n4 9 14 19 24    \n5 10 15 20 25 30\n11 16 21 26 31  \n17 22 27 32     \n23 28 33        \n29 34           \n35              \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(and the input to de-oblique)&lt;/p&gt;\n\n&lt;h1&gt;bonus deambiguated de-oblique matrices&lt;/h1&gt;\n\n&lt;p&gt;There&amp;#39;s only one de-oblique solution for a square matrix, but when the result is not square, another input is needed to indicate whether the output should be &lt;strong&gt;tall&lt;/strong&gt; or &lt;strong&gt;wide&lt;/strong&gt; or provide specific dimentsions of output:&lt;/p&gt;\n\n&lt;h1&gt;rectangular oblique data input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;0      \n1 6    \n2 7 12 \n3 8 13 \n4 9 14 \n5 10 15\n11 16  \n17   \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;output for (wide) &lt;code&gt;deoblique (3 6,  INPUT)&lt;/code&gt; or &lt;code&gt;deoblique (WIDE,  INPUT)&lt;/code&gt;&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt; 0  1  2  3  4  5\n 6  7  8  9 10 11\n12 13 14 15 16 17\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;output for (tall) &lt;code&gt;deoblique (6 3,  INPUT)&lt;/code&gt; or &lt;code&gt;deoblique (TALL,  INPUT)&lt;/code&gt;&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt; 0  1  2\n 6  7  3\n12  8  4\n13  9  5\n14 10 11\n15 16 17\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;The main use of these functions in computer science is to operate on the diagonals of a matrix, and then revert it back to a rectangular form.  Usually the rectangular dimensions are known. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The oblique function slices a matrix (2d array) into diagonals.\n\nThe de-oblique function takes diagonals of a matrix, and reassembles the original rectangular one.\n\n\n#input for oblique\n     0  1  2  3  4  5\n     6  7  8  9 10 11\n    12 13 14 15 16 17\n    18 19 20 21 22 23\n    24 25 26 27 28 29\n    30 31 32 33 34 35\n\n(and the output to de-oblique)\n\n\n#output for oblique\n\n    0               \n    1 6             \n    2 7 12          \n    3 8 13 18       \n    4 9 14 19 24    \n    5 10 15 20 25 30\n    11 16 21 26 31  \n    17 22 27 32     \n    23 28 33        \n    29 34           \n    35              \n\n(and the input to de-oblique)\n\n# bonus deambiguated de-oblique matrices\n\nThere's only one de-oblique solution for a square matrix, but when the result is not square, another input is needed to indicate whether the output should be **tall** or **wide** or provide specific dimentsions of output:\n\n# rectangular oblique data input\n    0      \n    1 6    \n    2 7 12 \n    3 8 13 \n    4 9 14 \n    5 10 15\n    11 16  \n    17   \n\n# output for (wide) `deoblique (3 6,  INPUT)` or `deoblique (WIDE,  INPUT)`\n     \n     0  1  2  3  4  5\n     6  7  8  9 10 11\n    12 13 14 15 16 17\n\n# output for (tall) `deoblique (6 3,  INPUT)` or `deoblique (TALL,  INPUT)`\n\n     0  1  2\n     6  7  3\n    12  8  4\n    13  9  5\n    14 10 11\n    15 16 17\n\n\n# Note\n\nThe main use of these functions in computer science is to operate on the diagonals of a matrix, and then revert it back to a rectangular form.  Usually the rectangular dimensions are known. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "48a4pu", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "score": 31, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 70, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1456752008.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/48a4pu/20160229_challenge_256_easy_oblique_and_deoblique/", "locked": false, "name": "t3_48a4pu", "created": 1456780286.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/48a4pu/20160229_challenge_256_easy_oblique_and_deoblique/", "author_flair_text": "3 2", "quarantine": false, "title": "[2016-02-29] Challenge #256 [Easy] Oblique and De-Oblique", "created_utc": 1456751486.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 31}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Problem description&lt;/h1&gt;\n\n&lt;p&gt;Let&amp;#39;s consider a simple search engine: one that searches over a large list of short, pithy sayings. It can take a 5+ letter string as an input, and it returns any sayings that contain that sequence (ignoring whitespace and punctuation). For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; Search: jacka\nMatches: Jack and Jill went up the hill to fetch a pail of water.\n        All work and no play makes Jack a dull boy.\n        The Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\n\n Search: layma\nMatches: All work and no play makes Jack a dull boy.\n        The MUJAC playmaker actually kinda sucked at karate.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Typically, a search engine does not provide an easy way to simply search &amp;quot;everything&amp;quot;, especially if it is a private service. Having people get access to all your data generally devalues the usefulness of only showing small bits of it (as a search engine does). &lt;/p&gt;\n\n&lt;p&gt;We are going to force this (hypothetical) search engine to give us all of its results, by coming up with just the right inputs such that every one of its sayings is output at least once by all those searches. We will also be minimizing the number of searches we do, so we don&amp;#39;t &amp;quot;overload&amp;quot; the search engine.&lt;/p&gt;\n\n&lt;h1&gt;Formal input/output&lt;/h1&gt;\n\n&lt;p&gt;The input will be a (possibly very long) list of short sayings, one per line. Each has at least 5 letters.&lt;/p&gt;\n\n&lt;p&gt;The output must be a list of 5+ letter search queries. Each saying in the input must match at least one of the output queries. Minimize the number of queries you output.&lt;/p&gt;\n\n&lt;h1&gt;Sample input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;Jack and Jill went up the hill to fetch a pail of water.\nAll work and no play makes Jack and Jill a dull couple.\nThe Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\nThe MUJAC playmaker actually kinda sucked at karate.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;layma\njacka\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are multiple possible valid outputs. For example, this is another solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;djill\nmujac\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, while this is technically a valid solution, it is &lt;em&gt;not&lt;/em&gt; an optimal one, since it does not have the minimum possible (in this case, 2) search queries:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;jacka\nallwo\nthema\nthemu\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge input&lt;/h1&gt;\n\n&lt;p&gt;Use this file of 3877 one-line UNIX fortunes: &lt;a href=\"https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/oneliners.txt\"&gt;https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/oneliners.txt&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;This is a hard problem not just via its tag here on &lt;a href=\"/r/dailyprogrammer\"&gt;/r/dailyprogrammer&lt;/a&gt;; it&amp;#39;s in a &lt;a href=\"https://en.wikipedia.org/wiki/NP-completeness#NP-complete_problems\"&gt;class of problems&lt;/a&gt; that is generally known to computer scientists to be difficult to find efficient solutions to. I picked a &amp;quot;5+ letter&amp;quot; limit on the outputs since it makes brute-forcing hard: 26&lt;sup&gt;5&lt;/sup&gt; = 11,881,376 different combinations, checked against 3,877 lines each is 46 billion comparisons. That serves as a very big challenge. If you would like to make it easier while developing, you could turn the 5 character limit down to fewer -- reducing the number of possible outputs. Good luck!&lt;/p&gt;\n\n&lt;h1&gt;Lastly...&lt;/h1&gt;\n\n&lt;p&gt;Got your own idea for a super hard problem? Drop by &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and share it with everyone!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Problem description\n\nLet's consider a simple search engine: one that searches over a large list of short, pithy sayings. It can take a 5+ letter string as an input, and it returns any sayings that contain that sequence (ignoring whitespace and punctuation). For example:\n\n     Search: jacka\n    Matches: Jack and Jill went up the hill to fetch a pail of water.\n            All work and no play makes Jack a dull boy.\n            The Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\n\n     Search: layma\n    Matches: All work and no play makes Jack a dull boy.\n            The MUJAC playmaker actually kinda sucked at karate.\n\n\nTypically, a search engine does not provide an easy way to simply search \"everything\", especially if it is a private service. Having people get access to all your data generally devalues the usefulness of only showing small bits of it (as a search engine does). \n\nWe are going to force this (hypothetical) search engine to give us all of its results, by coming up with just the right inputs such that every one of its sayings is output at least once by all those searches. We will also be minimizing the number of searches we do, so we don't \"overload\" the search engine.\n\n# Formal input/output\n\nThe input will be a (possibly very long) list of short sayings, one per line. Each has at least 5 letters.\n\nThe output must be a list of 5+ letter search queries. Each saying in the input must match at least one of the output queries. Minimize the number of queries you output.\n\n# Sample input\n\n    Jack and Jill went up the hill to fetch a pail of water.\n    All work and no play makes Jack and Jill a dull couple.\n    The Manchester United Junior Athletic Club (MUJAC) karate team was super good at kicking.\n    The MUJAC playmaker actually kinda sucked at karate.\n\n# Sample output\n\n    layma\n    jacka\n\nThere are multiple possible valid outputs. For example, this is another solution:\n\n    djill\n    mujac\n\nAlso, while this is technically a valid solution, it is *not* an optimal one, since it does not have the minimum possible (in this case, 2) search queries:\n\n    jacka\n    allwo\n    thema\n    themu\n\n# Challenge input\n\nUse this file of 3877 one-line UNIX fortunes: https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/common/oneliners.txt\n\n# Notes\n\nThis is a hard problem not just via its tag here on /r/dailyprogrammer; it's in a [class of problems](https://en.wikipedia.org/wiki/NP-completeness#NP-complete_problems) that is generally known to computer scientists to be difficult to find efficient solutions to. I picked a \"5+ letter\" limit on the outputs since it makes brute-forcing hard: 26^5 = 11,881,376 different combinations, checked against 3,877 lines each is 46 billion comparisons. That serves as a very big challenge. If you would like to make it easier while developing, you could turn the 5 character limit down to fewer -- reducing the number of possible outputs. Good luck!\n\n# Lastly...\n\nGot your own idea for a super hard problem? Drop by /r/dailyprogrammer_ideas and share it with everyone!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "47o4b6", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Blackshell", "media": null, "score": 90, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 48, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1456475358.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/47o4b6/20160226_challenge_255_hard_hacking_a_search/", "locked": false, "name": "t3_47o4b6", "created": 1456503579.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/47o4b6/20160226_challenge_255_hard_hacking_a_search/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-02-26] Challenge #255 [Hard] Hacking a search engine", "created_utc": 1456474779.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 90}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;Due to an unfortunate compression error your lucky number in base n was compressed to a simple string where the conversion to decimal has potentially many values.&lt;/p&gt;\n\n&lt;p&gt;Normal base n numbers are strings of characters, where each character represents a value from 0 to (n-1) inclusive. The numbers we are dealing with here can only use digits though, so some &amp;quot;digits&amp;quot; span multiple characters, causing ambiguity.&lt;/p&gt;\n\n&lt;p&gt;For example &amp;quot;A1&amp;quot; in normal hexadecimal would in our case be &amp;quot;101&amp;quot; as &amp;quot;A&amp;quot; converts to 10, as &amp;quot;A&amp;quot; is the 10&lt;sup&gt;th&lt;/sup&gt; character in base 16 &lt;/p&gt;\n\n&lt;p&gt;&amp;quot;101&amp;quot; is can have multiple results when you convert from ambiguous base 16 to decimal as it could take on the possible values:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; 1*16^2 + 0*16^1 + 1*16^0  (dividing the digits as [1][0][1])\n 10*16^1 + 1*16^0 (dividing the digits as [10][1])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A few notes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Digits in an &amp;quot;ambiguous&amp;quot; number won&amp;#39;t start with a 0. For example, dividing the digits in 101 as &lt;code&gt;[1][01]&lt;/code&gt; is not valid because &lt;code&gt;01&lt;/code&gt; is not a valid digit.&lt;/li&gt;\n&lt;li&gt;Ensure that your solutions work with non-ambiguous bases, like &amp;quot;1010&amp;quot; base 2 -&amp;gt; 10&lt;/li&gt;\n&lt;li&gt;Recall that like normal base n numbers the range of values to multiply by a power of n is 0 to (n-1) inclusive.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;You will be given a string of decimal values (&amp;quot;0123456789&amp;quot;) and a base n.&lt;/p&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;Convert the input string to all possible unique base 10 values it could take on, sorted from smallest to largest.&lt;/p&gt;\n\n&lt;h1&gt;Challenge Inputs&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;101 2&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;101 16&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;120973 25&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Bonus Inputs&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;25190239128039083901283 100&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;251902391280395901283 2398&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The first 10,000 values of each Bonus output are pasted here respectively:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/QjP3gazp\"&gt;http://pastebin.com/QjP3gazp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/ajr9bN8q\"&gt;http://pastebin.com/ajr9bN8q&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Credit for this challenge goes to by &lt;a href=\"/u/wwillsey\"&gt;/u/wwillsey&lt;/a&gt;, who proposed it in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;. Have your own neat challenge idea? Drop by and show it off!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description:\n\nDue to an unfortunate compression error your lucky number in base n was compressed to a simple string where the conversion to decimal has potentially many values.\n\nNormal base n numbers are strings of characters, where each character represents a value from 0 to (n-1) inclusive. The numbers we are dealing with here can only use digits though, so some \"digits\" span multiple characters, causing ambiguity.\n\nFor example \"A1\" in normal hexadecimal would in our case be \"101\" as \"A\" converts to 10, as \"A\" is the 10^th character in base 16 \n\n\"101\" is can have multiple results when you convert from ambiguous base 16 to decimal as it could take on the possible values:\n\n     1*16^2 + 0*16^1 + 1*16^0  (dividing the digits as [1][0][1])\n     10*16^1 + 1*16^0 (dividing the digits as [10][1])\n\nA few notes:\n\n- Digits in an \"ambiguous\" number won't start with a 0. For example, dividing the digits in 101 as `[1][01]` is not valid because `01` is not a valid digit.\n- Ensure that your solutions work with non-ambiguous bases, like \"1010\" base 2 -&gt; 10\n- Recall that like normal base n numbers the range of values to multiply by a power of n is 0 to (n-1) inclusive.\n\n#Input:\nYou will be given a string of decimal values (\"0123456789\") and a base n.\n\n#Output:\nConvert the input string to all possible unique base 10 values it could take on, sorted from smallest to largest.\n\n\n# Challenge Inputs\n\n- `101 2`\n- `101 16`\n- `120973 25`\n\n# Bonus Inputs\n\n- `25190239128039083901283 100`\n- `251902391280395901283 2398`\n\nThe first 10,000 values of each Bonus output are pasted here respectively:\n\nhttp://pastebin.com/QjP3gazp\n\nhttp://pastebin.com/ajr9bN8q\n\n\n# Finally\n\nCredit for this challenge goes to by /u/wwillsey, who proposed it in /r/dailyprogrammer_ideas. Have your own neat challenge idea? Drop by and show it off!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "47docs", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Blackshell", "media": null, "score": 58, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 31, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1456336570.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/47docs/20160224_challenge_255_intermediate_ambiguous/", "locked": false, "name": "t3_47docs", "created": 1456363280.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/47docs/20160224_challenge_255_intermediate_ambiguous/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-02-24] Challenge #255 [Intermediate] Ambiguous Bases", "created_utc": 1456334480.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 58}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Problem description&lt;/h1&gt;\n\n&lt;p&gt;When you were a little kid, was indiscriminately flicking light switches super fun? I know it was for me. Let&amp;#39;s tap into that and try to recall that feeling with today&amp;#39;s challenge.&lt;/p&gt;\n\n&lt;p&gt;Imagine a row of N light switches, each attached to a light bulb. All the bulbs are off to start with. You are going to release your inner child so they can run back and forth along this row of light switches, flipping bunches of switches from on to off or vice versa. The challenge will be to figure out the state of the lights after this fun happens.&lt;/p&gt;\n\n&lt;h1&gt;Input description&lt;/h1&gt;\n\n&lt;p&gt;The input will have two parts. First, the number of switches/bulbs (N) is specified. On the remaining lines, there will be pairs of integers indicating ranges of switches that your inner child toggles as they run back and forth. These ranges are inclusive (both their end points, along with everything between them is included), and the positions of switches are zero-indexed (so the possible positions range from 0 to N-1).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10\n3 6\n0 4\n7 3\n9 9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is a more thorough explanation of what happens below.&lt;/p&gt;\n\n&lt;h1&gt;Output description&lt;/h1&gt;\n\n&lt;p&gt;The output is a single number: the number of switches that are on after all the running around.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Explanation of example&lt;/h1&gt;\n\n&lt;p&gt;Below is a step by step rendition of which switches each range toggled in order to get the output described above.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    0123456789\n    ..........\n3-6    ||||\n    ...XXXX...\n0-4 |||||\n    XXX..XX...\n7-3    |||||\n    XXXXX..X..\n9-9          |\n    XXXXX..X.X\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, 7 of the 10 bulbs are on at the end.&lt;/p&gt;\n\n&lt;h1&gt;Challenge input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;1000\n616 293\n344 942\n27 524\n716 291\n860 284\n74 928\n970 594\n832 772\n343 301\n194 882\n948 912\n533 654\n242 792\n408 34\n162 249\n852 693\n526 365\n869 303\n7 992\n200 487\n961 885\n678 828\n441 152\n394 453\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus points&lt;/h1&gt;\n\n&lt;p&gt;Make a solution that works for extremely large numbers of switches with very numerous ranges to flip. In other words, make a solution that solves this input quickly (in less than a couple seconds): &lt;a href=\"https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/ideas/switches/lots_of_switches.txt\"&gt;lots_of_switches.txt (3 MB)&lt;/a&gt;. So you don&amp;#39;t have to download it, here&amp;#39;s what the input is: 5,000,000 switches, with 200,000 randomly generated ranges to switch.&lt;/p&gt;\n\n&lt;h1&gt;Lastly...&lt;/h1&gt;\n\n&lt;p&gt;Have a cool problem that you would like to challenge others to solve? Come by &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and let everyone know about it!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Problem description\n\nWhen you were a little kid, was indiscriminately flicking light switches super fun? I know it was for me. Let's tap into that and try to recall that feeling with today's challenge.\n\nImagine a row of N light switches, each attached to a light bulb. All the bulbs are off to start with. You are going to release your inner child so they can run back and forth along this row of light switches, flipping bunches of switches from on to off or vice versa. The challenge will be to figure out the state of the lights after this fun happens.\n\n# Input description\n\nThe input will have two parts. First, the number of switches/bulbs (N) is specified. On the remaining lines, there will be pairs of integers indicating ranges of switches that your inner child toggles as they run back and forth. These ranges are inclusive (both their end points, along with everything between them is included), and the positions of switches are zero-indexed (so the possible positions range from 0 to N-1).\n\n**Example input:**\n\n    10\n    3 6\n    0 4\n    7 3\n    9 9\n\nThere is a more thorough explanation of what happens below.\n\n# Output description\n\nThe output is a single number: the number of switches that are on after all the running around.\n\n**Example output:**\n\n    7\n\n# Explanation of example\n\nBelow is a step by step rendition of which switches each range toggled in order to get the output described above.\n\n        0123456789\n        ..........\n    3-6    ||||\n        ...XXXX...\n    0-4 |||||\n        XXX..XX...\n    7-3    |||||\n        XXXXX..X..\n    9-9          |\n        XXXXX..X.X\n\nAs you can see, 7 of the 10 bulbs are on at the end.\n\n# Challenge input\n\n    1000\n    616 293\n    344 942\n    27 524\n    716 291\n    860 284\n    74 928\n    970 594\n    832 772\n    343 301\n    194 882\n    948 912\n    533 654\n    242 792\n    408 34\n    162 249\n    852 693\n    526 365\n    869 303\n    7 992\n    200 487\n    961 885\n    678 828\n    441 152\n    394 453\n\n# Bonus points\n\nMake a solution that works for extremely large numbers of switches with very numerous ranges to flip. In other words, make a solution that solves this input quickly (in less than a couple seconds): [lots_of_switches.txt (3 MB)](https://raw.githubusercontent.com/fsufitch/dailyprogrammer/master/ideas/switches/lots_of_switches.txt). So you don't have to download it, here's what the input is: 5,000,000 switches, with 200,000 randomly generated ranges to switch.\n\n# Lastly...\n\nHave a cool problem that you would like to challenge others to solve? Come by /r/dailyprogrammer_ideas and let everyone know about it!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "46zm8m", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Blackshell", "media": null, "score": 107, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 204, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1456180988.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/46zm8m/20160222_challenge_255_easy_playing_with_light/", "locked": false, "name": "t3_46zm8m", "created": 1456151485.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/46zm8m/20160222_challenge_255_easy_playing_with_light/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-02-22] Challenge #255 [Easy] Playing with light switches", "created_utc": 1456122685.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 107}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;DNA sequences are made up of a 4 character alphabet - A, C, T or G, that describe the nucleotide bases in a gene sequence. To ascertain the sequence of DNA, scientists use chemical methods to identify the component nucleotides in a method called DNA sequencing. DNA &lt;em&gt;shotgun&lt;/em&gt; sequencing is a method whereby DNA subsequences of the same larger sequence are produced at massive parallel scale by DNA sequencing methods, and the overlap between segments is used to reconstruct the input gene. This is a fast and accurate method, and is dropping in price. Shotgun sequencing was used to perform the first entire sequence of a human&amp;#39;s DNA, for example. For additional background information, see &lt;a href=\"http://en.wikipedia.org/wiki/Shotgun_sequencing\"&gt;Wikipedia on shotgun sequencing&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;re working in a DNA laboratory and you have to reconstruct a gene&amp;#39;s sequence from a series of fragments!&lt;/p&gt;\n\n&lt;h1&gt;Formal Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a series of DNA sequence fragments, which include overlaps with neighbor sequences, but not in any specific order - it&amp;#39;s random. Your job is to read in the fragments and reconstruct the input DNA sequence that lead to the fragments. &lt;/p&gt;\n\n&lt;h1&gt;Formal Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the DNA sequence it calculated. &lt;/p&gt;\n\n&lt;h1&gt;Sample Input&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given the DNA sequence of one of the strands of DNA (e.g. no complementarity calculations or inferences required) using the DNA alphabet of &amp;quot;a,t,c,g&amp;quot;. Assume no read errors, also. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    tgca\n    taggcta\n    gtcatgcttaggcta\n    agcatgctgcag\n    tcatgct\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Sample Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the shortest DNA sequence that would contain the above fragments. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    agcatgctgcagtcatgcttaggcta\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;    gatccatctggatcctatagttcatggaaagccgctgc\n    tatttcaacattaattgttggttttgatacagatggtacacca\n    aaaagaaattcaaaaagaacaagaaaaatctgaaaaacaacaaaa\n    ggaatgtcaatcctatagattaactgttgaagattcaccatcagttg\n    tggaaataaaaatattgaaattgcagtcattagaaataaacaac\n    tcaagtagaatatgccatggaagcagtaagaaaaggtactgttg\n    tgcaagatcaattagaaaaatcgttaaattagatgaccacatt\n    tgtcgttgaagctgaaaaagaaattcaaaaagaacaagaaaaatct\n    gaaaaacaacaaaaataaattacatcaaattccttttttt\n    caatcgttttattagatgaacaagaaattgataaattagttgc\n    aatctttatcaaactgatccatctggatcctatagttcatg\n    gaaattgcagtcattagaaataaacaaccaatcgttttattagatg\n    atcgttaaattagatgaccacatttgtttaacctttgctggt\n    aattatacagacgttagtgaagaggaatcaattaaattagcagtta\n    tatactcaaagtggtggtgttagaccatttggtatttcaacattaat\n    ttttaggtgttgaaaagaaagcaaccgctaaacttcaaga\n    aagaaagcaaccgctaaacttcaagatgcaagatcaattagaaaa\n    ccccacctttttttttaattatcttcaagtttttttaaaaaaaaaaaaaaaa\n    gaatttttagaaaagaattatacagacgttagtgaagaggaatc\n    agtgcaagatacgatagagcaattacagttttctcaccagatg\n    aattaaattagcagttagagctttattagagattgttgaaag\n    cagttggtgtacgtggtaaagatgttattgttttaggtgttgaa\n    ttcaacaacgttatactcaaagtggtggtgttagaccatttgg\n    ataaattacatcaaattcctttttttccccacctttttttt\n    aattggtcgtagttcaaagagtgttggtgaatttttagaaaag\n    aatatatttctaaatttattgctggtattcaacaacgt\n    aacaagaaattgataaattagttgctgtcgttgaagctga\n    gagctttattagagattgttgaaagtggaaataaaaatatt\n    ttaactgccgattcacgtgtattaattagtaaagcattaat\n    acgatagagcaattacagttttctcaccagatggtcatctttt\n    aaggtactgttgcagttggtgtacgtggtaaagatgttattg\n    tgtttaacctttgctggtttaactgccgattcacgtgtattaatt\n    aataatataatatatatataaatacataataatgtcaagtgcaagat\n    agtaaagcattaatggaatgtcaatcctatagattaactgt\n    tgaagattcaccatcagttgaatatatttctaaatttattgctggta\n    gaaagccgctgcaattggtcgtagttcaaagagtgttggt\n    gtcatctttttcaagtagaatatgccatggaagcagtaagaa\n    tgttggttttgatacagatggtacaccaaatctttatcaaact\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input Solution&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;    aataatataatatatatataaatacataataatgtcaagtgcaagatacgatagagcaattacagttttctcaccagatggtcatctttttcaagtagaatatgccatggaagcagtaagaaaaggtactgttgcagttggtgtacgtggtaaagatgttattgttttaggtgttgaaaagaaagcaaccgctaaacttcaagatgcaagatcaattagaaaaatcgttaaattagatgaccacatttgtttaacctttgctggtttaactgccgattcacgtgtattaattagtaaagcattaatggaatgtcaatcctatagattaactgttgaagattcaccatcagttgaatatatttctaaatttattgctggtattcaacaacgttatactcaaagtggtggtgttagaccatttggtatttcaacattaattgttggttttgatacagatggtacaccaaatctttatcaaactgatccatctggatcctatagttcatggaaagccgctgcaattggtcgtagttcaaagagtgttggtgaatttttagaaaagaattatacagacgttagtgaagaggaatcaattaaattagcagttagagctttattagagattgttgaaagtggaaataaaaatattgaaattgcagtcattagaaataaacaaccaatcgttttattagatgaacaagaaattgataaattagttgctgtcgttgaagctgaaaaagaaattcaaaaagaacaagaaaaatctgaaaaacaacaaaaataaattacatcaaattcctttttttccccacctttttttttaattatcttcaagtttttttaaaaaaaaaaaaaaaa\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This same idea - shortest common superstring - was also suggested by &lt;a href=\"/u/202halffound\"&gt;/u/202halffound&lt;/a&gt;, many thanks! If you have your own idea for a challenge, submit it to &lt;a href=\"/r/DailyProgrammer_Ideas\"&gt;/r/DailyProgrammer_Ideas&lt;/a&gt;, and there&amp;#39;s a good chance we&amp;#39;ll post it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nDNA sequences are made up of a 4 character alphabet - A, C, T or G, that describe the nucleotide bases in a gene sequence. To ascertain the sequence of DNA, scientists use chemical methods to identify the component nucleotides in a method called DNA sequencing. DNA *shotgun* sequencing is a method whereby DNA subsequences of the same larger sequence are produced at massive parallel scale by DNA sequencing methods, and the overlap between segments is used to reconstruct the input gene. This is a fast and accurate method, and is dropping in price. Shotgun sequencing was used to perform the first entire sequence of a human's DNA, for example. For additional background information, see [Wikipedia on shotgun sequencing](http://en.wikipedia.org/wiki/Shotgun_sequencing). \n\nYou're working in a DNA laboratory and you have to reconstruct a gene's sequence from a series of fragments!\n\n# Formal Input Description\n\nYou'll be given a series of DNA sequence fragments, which include overlaps with neighbor sequences, but not in any specific order - it's random. Your job is to read in the fragments and reconstruct the input DNA sequence that lead to the fragments. \n\n# Formal Output Description\n\nYour program should emit the DNA sequence it calculated. \n\n# Sample Input\n\nYou'll be given the DNA sequence of one of the strands of DNA (e.g. no complementarity calculations or inferences required) using the DNA alphabet of \"a,t,c,g\". Assume no read errors, also. Example:\n\n        tgca\n        taggcta\n        gtcatgcttaggcta\n        agcatgctgcag\n        tcatgct\n\n# Sample Output\n\nYour program should emit the shortest DNA sequence that would contain the above fragments. Example:\n\n        agcatgctgcagtcatgcttaggcta\n\n# Challenge Input\n\n        gatccatctggatcctatagttcatggaaagccgctgc\n        tatttcaacattaattgttggttttgatacagatggtacacca\n        aaaagaaattcaaaaagaacaagaaaaatctgaaaaacaacaaaa\n        ggaatgtcaatcctatagattaactgttgaagattcaccatcagttg\n        tggaaataaaaatattgaaattgcagtcattagaaataaacaac\n        tcaagtagaatatgccatggaagcagtaagaaaaggtactgttg\n        tgcaagatcaattagaaaaatcgttaaattagatgaccacatt\n        tgtcgttgaagctgaaaaagaaattcaaaaagaacaagaaaaatct\n        gaaaaacaacaaaaataaattacatcaaattccttttttt\n        caatcgttttattagatgaacaagaaattgataaattagttgc\n        aatctttatcaaactgatccatctggatcctatagttcatg\n        gaaattgcagtcattagaaataaacaaccaatcgttttattagatg\n        atcgttaaattagatgaccacatttgtttaacctttgctggt\n        aattatacagacgttagtgaagaggaatcaattaaattagcagtta\n        tatactcaaagtggtggtgttagaccatttggtatttcaacattaat\n        ttttaggtgttgaaaagaaagcaaccgctaaacttcaaga\n        aagaaagcaaccgctaaacttcaagatgcaagatcaattagaaaa\n        ccccacctttttttttaattatcttcaagtttttttaaaaaaaaaaaaaaaa\n        gaatttttagaaaagaattatacagacgttagtgaagaggaatc\n        agtgcaagatacgatagagcaattacagttttctcaccagatg\n        aattaaattagcagttagagctttattagagattgttgaaag\n        cagttggtgtacgtggtaaagatgttattgttttaggtgttgaa\n        ttcaacaacgttatactcaaagtggtggtgttagaccatttgg\n        ataaattacatcaaattcctttttttccccacctttttttt\n        aattggtcgtagttcaaagagtgttggtgaatttttagaaaag\n        aatatatttctaaatttattgctggtattcaacaacgt\n        aacaagaaattgataaattagttgctgtcgttgaagctga\n        gagctttattagagattgttgaaagtggaaataaaaatatt\n        ttaactgccgattcacgtgtattaattagtaaagcattaat\n        acgatagagcaattacagttttctcaccagatggtcatctttt\n        aaggtactgttgcagttggtgtacgtggtaaagatgttattg\n        tgtttaacctttgctggtttaactgccgattcacgtgtattaatt\n        aataatataatatatatataaatacataataatgtcaagtgcaagat\n        agtaaagcattaatggaatgtcaatcctatagattaactgt\n        tgaagattcaccatcagttgaatatatttctaaatttattgctggta\n        gaaagccgctgcaattggtcgtagttcaaagagtgttggt\n        gtcatctttttcaagtagaatatgccatggaagcagtaagaa\n        tgttggttttgatacagatggtacaccaaatctttatcaaact\n\n\n# Challenge Input Solution\n\n        aataatataatatatatataaatacataataatgtcaagtgcaagatacgatagagcaattacagttttctcaccagatggtcatctttttcaagtagaatatgccatggaagcagtaagaaaaggtactgttgcagttggtgtacgtggtaaagatgttattgttttaggtgttgaaaagaaagcaaccgctaaacttcaagatgcaagatcaattagaaaaatcgttaaattagatgaccacatttgtttaacctttgctggtttaactgccgattcacgtgtattaattagtaaagcattaatggaatgtcaatcctatagattaactgttgaagattcaccatcagttgaatatatttctaaatttattgctggtattcaacaacgttatactcaaagtggtggtgttagaccatttggtatttcaacattaattgttggttttgatacagatggtacaccaaatctttatcaaactgatccatctggatcctatagttcatggaaagccgctgcaattggtcgtagttcaaagagtgttggtgaatttttagaaaagaattatacagacgttagtgaagaggaatcaattaaattagcagttagagctttattagagattgttgaaagtggaaataaaaatattgaaattgcagtcattagaaataaacaaccaatcgttttattagatgaacaagaaattgataaattagttgctgtcgttgaagctgaaaaagaaattcaaaaagaacaagaaaaatctgaaaaacaacaaaaataaattacatcaaattcctttttttccccacctttttttttaattatcttcaagtttttttaaaaaaaaaaaaaaaa\n\n# Credit\n\nThis same idea - shortest common superstring - was also suggested by /u/202halffound, many thanks! If you have your own idea for a challenge, submit it to /r/DailyProgrammer_Ideas, and there's a good chance we'll post it.\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "46km7n", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 80, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 53, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1455891836.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/46km7n/20160219_challenge_254_hard_dna_shotgun_sequencing/", "locked": false, "name": "t3_46km7n", "created": 1455917154.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/46km7n/20160219_challenge_254_hard_dna_shotgun_sequencing/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-02-19] Challenge #254 [Hard] DNA Shotgun Sequencing", "created_utc": 1455888354.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 80}}, {"kind": "t3", "data": {"domain": "self.dailyprogrammer", "banned_by": null, "media_embed": {}, "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;The game of Reversi (or Othello) is a color flipping strategy game played between two players. It&amp;#39;s played on an 8x8 uncheckered board. In each turn, the player must place a new chip on the game board. The chip must be placed in a currently empty square. The other requirement is that it be placed so that one or more of their opponent&amp;#39;s chips lie between the empty square and another chip of the player&amp;#39;s color. That is, the player placing a black chip must place it on an empty square with one or more white chips in a row - vertical, horizontal, or diagonal - between it and another black chip.&lt;/p&gt;\n\n&lt;p&gt;The object of the game is to have the majority of disks turned to display your color when the last playable empty square is filled.&lt;/p&gt;\n\n&lt;p&gt;Today&amp;#39;s challenge is to review a game in progress and indicate legal moves for the next player. &lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a row with a single letter, &lt;code&gt;X&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt;, denoting the player whose move it is. Then you&amp;#39;ll be given the board as an 8x8 grid, with a dash &lt;code&gt;-&lt;/code&gt; for an open square and an &lt;code&gt;X&lt;/code&gt; or an &lt;code&gt;O&lt;/code&gt; for a space occupied by that piece. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;X\n--------\n--------\n--------\n---OX---\n---XO---\n--------\n--------\n--------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;Your program should indicate the quantity of moves for that piece and then draw where they could be, indicated using a star &lt;code&gt;*&lt;/code&gt;. Example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 legal moves for X\n--------\n--------\n---*----\n--*OX---\n---XO*--\n----*---\n--------\n--------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;O\n--------\n--------\n---O----\n--XXOX--\n---XOO--\n----X---\n--------\n--------\n\nX\n--------\n--------\n---OX---\n--XXXO--\n--XOO---\n---O----\n--------\n--------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;11 legal moves for O\n--------\n--------\n--*O-**-\n-*XXOX*-\n-**XOO--\n--**X---\n---**---\n--------\n\n12 legal moves for X\n--------\n--***---\n--*OX---\n--XXXO*-\n--XOO**-\n--*O**--\n---**---\n--------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;For an interesting discussion of such algorithms, see the Wikipedia page on &lt;a href=\"https://en.wikipedia.org/wiki/Computer_Othello\"&gt;computer Othello&lt;/a&gt;. An 8x8 board has nearly 10&lt;sup&gt;28&lt;/sup&gt; legal moves in a game tree possible! One of the first computer Othello programs was published in 1977, written in FORTRAN. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nThe game of Reversi (or Othello) is a color flipping strategy game played between two players. It's played on an 8x8 uncheckered board. In each turn, the player must place a new chip on the game board. The chip must be placed in a currently empty square. The other requirement is that it be placed so that one or more of their opponent's chips lie between the empty square and another chip of the player's color. That is, the player placing a black chip must place it on an empty square with one or more white chips in a row - vertical, horizontal, or diagonal - between it and another black chip.\n\nThe object of the game is to have the majority of disks turned to display your color when the last playable empty square is filled.\n\nToday's challenge is to review a game in progress and indicate legal moves for the next player. \n\n# Input Description\n\nYou'll be given a row with a single letter, `X` or `O`, denoting the player whose move it is. Then you'll be given the board as an 8x8 grid, with a dash `-` for an open square and an `X` or an `O` for a space occupied by that piece. Example:\n\n    X\n    --------\n    --------\n    --------\n    ---OX---\n    ---XO---\n    --------\n    --------\n    --------\n\n# Output Description\n\nYour program should indicate the quantity of moves for that piece and then draw where they could be, indicated using a star `*`. Example\n\n    4 legal moves for X\n    --------\n    --------\n    ---*----\n    --*OX---\n    ---XO*--\n    ----*---\n    --------\n    --------\n\n# Challenge Input\n\n    O\n    --------\n    --------\n    ---O----\n    --XXOX--\n    ---XOO--\n    ----X---\n    --------\n    --------\n\n    X\n    --------\n    --------\n    ---OX---\n    --XXXO--\n    --XOO---\n    ---O----\n    --------\n    --------\n\n# Challenge Output\n\n    11 legal moves for O\n    --------\n    --------\n    --*O-**-\n    -*XXOX*-\n    -**XOO--\n    --**X---\n    ---**---\n    --------\n\n    12 legal moves for X\n    --------\n    --***---\n    --*OX---\n    --XXXO*-\n    --XOO**-\n    --*O**--\n    ---**---\n    --------\n\n# Note\n\nFor an interesting discussion of such algorithms, see the Wikipedia page on [computer Othello](https://en.wikipedia.org/wiki/Computer_Othello). An 8x8 board has nearly 10^28 legal moves in a game tree possible! One of the first computer Othello programs was published in 1977, written in FORTRAN. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "468pvf", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "score": 64, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 44, "thumbnail": "", "subreddit_id": "t5_2tj45", "hide_score": false, "edited": 1455844894.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/dailyprogrammer/comments/468pvf/20160217_challenge_254_intermediate_finding_legal/", "locked": false, "name": "t3_468pvf", "created": 1455746155.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/468pvf/20160217_challenge_254_intermediate_finding_legal/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-02-17] Challenge #254 [Intermediate] Finding Legal Reversi Moves", "created_utc": 1455717355.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 64}}], "after": "t3_468pvf", "before": null}}